// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="envelope,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=58,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=3492,HLS_SYN_LUT=4134}" *)

module envelope (
        ap_clk,
        ap_rst_n,
        wave_in_V_TDATA,
        wave_in_V_TVALID,
        wave_in_V_TREADY,
        wave_out_V_TDATA,
        wave_out_V_TVALID,
        wave_out_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 89'd1;
parameter    ap_ST_fsm_state2 = 89'd2;
parameter    ap_ST_fsm_state3 = 89'd4;
parameter    ap_ST_fsm_state4 = 89'd8;
parameter    ap_ST_fsm_state5 = 89'd16;
parameter    ap_ST_fsm_state6 = 89'd32;
parameter    ap_ST_fsm_state7 = 89'd64;
parameter    ap_ST_fsm_state8 = 89'd128;
parameter    ap_ST_fsm_state9 = 89'd256;
parameter    ap_ST_fsm_state10 = 89'd512;
parameter    ap_ST_fsm_state11 = 89'd1024;
parameter    ap_ST_fsm_state12 = 89'd2048;
parameter    ap_ST_fsm_state13 = 89'd4096;
parameter    ap_ST_fsm_state14 = 89'd8192;
parameter    ap_ST_fsm_state15 = 89'd16384;
parameter    ap_ST_fsm_state16 = 89'd32768;
parameter    ap_ST_fsm_state17 = 89'd65536;
parameter    ap_ST_fsm_state18 = 89'd131072;
parameter    ap_ST_fsm_state19 = 89'd262144;
parameter    ap_ST_fsm_state20 = 89'd524288;
parameter    ap_ST_fsm_state21 = 89'd1048576;
parameter    ap_ST_fsm_state22 = 89'd2097152;
parameter    ap_ST_fsm_state23 = 89'd4194304;
parameter    ap_ST_fsm_state24 = 89'd8388608;
parameter    ap_ST_fsm_state25 = 89'd16777216;
parameter    ap_ST_fsm_state26 = 89'd33554432;
parameter    ap_ST_fsm_state27 = 89'd67108864;
parameter    ap_ST_fsm_state28 = 89'd134217728;
parameter    ap_ST_fsm_state29 = 89'd268435456;
parameter    ap_ST_fsm_state30 = 89'd536870912;
parameter    ap_ST_fsm_state31 = 89'd1073741824;
parameter    ap_ST_fsm_state32 = 89'd2147483648;
parameter    ap_ST_fsm_state33 = 89'd4294967296;
parameter    ap_ST_fsm_state34 = 89'd8589934592;
parameter    ap_ST_fsm_state35 = 89'd17179869184;
parameter    ap_ST_fsm_state36 = 89'd34359738368;
parameter    ap_ST_fsm_state37 = 89'd68719476736;
parameter    ap_ST_fsm_state38 = 89'd137438953472;
parameter    ap_ST_fsm_state39 = 89'd274877906944;
parameter    ap_ST_fsm_state40 = 89'd549755813888;
parameter    ap_ST_fsm_state41 = 89'd1099511627776;
parameter    ap_ST_fsm_state42 = 89'd2199023255552;
parameter    ap_ST_fsm_state43 = 89'd4398046511104;
parameter    ap_ST_fsm_state44 = 89'd8796093022208;
parameter    ap_ST_fsm_state45 = 89'd17592186044416;
parameter    ap_ST_fsm_state46 = 89'd35184372088832;
parameter    ap_ST_fsm_state47 = 89'd70368744177664;
parameter    ap_ST_fsm_state48 = 89'd140737488355328;
parameter    ap_ST_fsm_state49 = 89'd281474976710656;
parameter    ap_ST_fsm_state50 = 89'd562949953421312;
parameter    ap_ST_fsm_state51 = 89'd1125899906842624;
parameter    ap_ST_fsm_state52 = 89'd2251799813685248;
parameter    ap_ST_fsm_state53 = 89'd4503599627370496;
parameter    ap_ST_fsm_state54 = 89'd9007199254740992;
parameter    ap_ST_fsm_state55 = 89'd18014398509481984;
parameter    ap_ST_fsm_state56 = 89'd36028797018963968;
parameter    ap_ST_fsm_state57 = 89'd72057594037927936;
parameter    ap_ST_fsm_state58 = 89'd144115188075855872;
parameter    ap_ST_fsm_state59 = 89'd288230376151711744;
parameter    ap_ST_fsm_state60 = 89'd576460752303423488;
parameter    ap_ST_fsm_state61 = 89'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 89'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 89'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 89'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 89'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 89'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 89'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 89'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 89'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 89'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 89'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 89'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 89'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 89'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 89'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 89'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 89'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 89'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 89'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 89'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 89'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 89'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 89'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 89'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 89'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 89'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 89'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 89'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 89'd309485009821345068724781056;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] wave_in_V_TDATA;
input   wave_in_V_TVALID;
output   wave_in_V_TREADY;
output  [31:0] wave_out_V_TDATA;
output   wave_out_V_TVALID;
input   wave_out_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] wave_in_V_0_data_out;
wire    wave_in_V_0_vld_in;
wire    wave_in_V_0_vld_out;
wire    wave_in_V_0_ack_in;
reg    wave_in_V_0_ack_out;
reg   [31:0] wave_in_V_0_payload_A;
reg   [31:0] wave_in_V_0_payload_B;
reg    wave_in_V_0_sel_rd;
reg    wave_in_V_0_sel_wr;
wire    wave_in_V_0_sel;
wire    wave_in_V_0_load_A;
wire    wave_in_V_0_load_B;
reg   [1:0] wave_in_V_0_state;
wire    wave_in_V_0_state_cmp_full;
reg   [31:0] wave_out_V_1_data_out;
reg    wave_out_V_1_vld_in;
wire    wave_out_V_1_vld_out;
wire    wave_out_V_1_ack_in;
wire    wave_out_V_1_ack_out;
reg   [31:0] wave_out_V_1_payload_A;
reg   [31:0] wave_out_V_1_payload_B;
reg    wave_out_V_1_sel_rd;
reg    wave_out_V_1_sel_wr;
wire    wave_out_V_1_sel;
wire    wave_out_V_1_load_A;
wire    wave_out_V_1_load_B;
reg   [1:0] wave_out_V_1_state;
wire    wave_out_V_1_state_cmp_full;
wire   [31:0] press;
wire   [31:0] attackDuration;
wire   [31:0] decayDuration;
wire   [31:0] sustainAmplitude;
wire   [31:0] releaseDuration;
reg   [0:0] guard_variable_for_e_4;
reg   [31:0] attackSlope;
reg   [0:0] guard_variable_for_e_3;
reg   [31:0] decaySlope;
reg   [0:0] guard_variable_for_e_2;
reg   [31:0] releaseSlope;
reg   [0:0] guard_variable_for_e_1;
reg   [31:0] releaseTime;
reg   [0:0] guard_variable_for_e;
reg   [31:0] sustainTime;
reg   [0:0] wait_r;
reg   [31:0] time_r;
reg    wave_in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [88:0] ap_CS_fsm;
wire    ap_CS_fsm_state67;
reg    wave_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire   [31:0] grp_fu_184_p1;
reg   [31:0] reg_193;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state74;
reg   [0:0] sel_tmp2_reg_777;
reg   [0:0] sel_tmp3_reg_788;
reg   [0:0] sel_tmp5_reg_794;
wire    ap_CS_fsm_state79;
reg   [0:0] tmp_1_reg_747;
wire   [31:0] grp_fu_169_p2;
reg   [31:0] reg_199;
wire    ap_CS_fsm_state83;
wire   [31:0] grp_fu_175_p2;
reg   [31:0] reg_205;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state87;
reg   [31:0] releaseDuration_read_reg_626;
wire    ap_CS_fsm_state1;
reg   [31:0] sustainAmplitude_rea_reg_635;
reg   [31:0] decayDuration_read_reg_643;
reg   [31:0] attackDuration_read_reg_651;
reg   [31:0] press_read_reg_659;
wire   [0:0] guard_variable_for_e_load_fu_211_p1;
reg   [0:0] guard_variable_for_e_reg_664;
wire   [0:0] guard_variable_for_e_1_load_fu_227_p1;
reg   [0:0] guard_variable_for_e_1_reg_668;
wire    ap_CS_fsm_state22;
wire   [31:0] tmp_6_i_fu_231_p2;
reg   [31:0] tmp_6_i_reg_672;
wire   [0:0] guard_variable_for_e_2_load_fu_247_p1;
reg   [0:0] guard_variable_for_e_2_reg_677;
wire    ap_CS_fsm_state44;
wire   [31:0] tmp_10_i_fu_251_p2;
reg   [31:0] tmp_10_i_reg_681;
wire   [31:0] tmp_i_fu_270_p1;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state66;
wire   [31:0] grp_fu_188_p2;
wire   [0:0] guard_variable_for_e_4_load_fu_296_p1;
wire   [0:0] tmp_3_fu_310_p2;
reg   [0:0] tmp_3_reg_707;
wire   [0:0] not_tmp_3_fu_315_p2;
reg   [0:0] not_tmp_3_reg_714;
reg   [31:0] tmp_21_reg_721;
wire   [31:0] sustainTime_new_1_tm_fu_403_p3;
reg   [31:0] sustainTime_new_1_tm_reg_732;
wire   [31:0] time_load_s_fu_411_p3;
reg   [31:0] time_load_s_reg_738;
wire   [0:0] tmp_1_fu_419_p2;
wire   [0:0] tmp_9_fu_436_p2;
reg   [0:0] tmp_9_reg_755;
wire   [0:0] tmp_15_fu_441_p2;
reg   [0:0] tmp_15_reg_761;
wire   [31:0] tmp_10_fu_447_p2;
reg   [31:0] tmp_10_reg_767;
wire    ap_CS_fsm_state68;
wire   [31:0] tmp_16_fu_455_p2;
reg   [31:0] tmp_16_reg_772;
wire   [0:0] sel_tmp2_fu_464_p2;
wire   [0:0] sel_tmp8_fu_514_p2;
reg   [0:0] sel_tmp8_reg_783;
wire   [0:0] sel_tmp3_fu_526_p2;
wire   [0:0] sel_tmp5_fu_538_p2;
wire   [0:0] wait_flag_1_fu_543_p2;
reg   [0:0] wait_flag_1_reg_800;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state80;
wire   [0:0] not_or_cond_fu_587_p2;
reg   [0:0] not_or_cond_reg_819;
wire   [31:0] resultAmplitude_7_fu_607_p3;
reg   [31:0] resultAmplitude_7_reg_824;
wire   [31:0] resultAmplitude_fu_614_p3;
reg   [0:0] releaseTime_flag_reg_125;
wire   [0:0] guard_variable_for_e_3_load_fu_281_p1;
reg   [31:0] releaseTime_loc_reg_137;
reg   [0:0] sustainTime_flag_reg_147;
reg   [31:0] sustainTime_loc_reg_160;
wire   [31:0] grp_fu_179_p2;
wire   [31:0] releaseTime_new_1_re_fu_383_p3;
wire   [0:0] releaseTime_flag_1_s_fu_377_p2;
wire   [0:0] sustainTime_flag_1_s_fu_397_p2;
wire   [31:0] tmp_20_fu_547_p2;
reg   [31:0] grp_fu_169_p0;
reg   [31:0] grp_fu_169_p1;
wire    ap_CS_fsm_state24;
reg   [31:0] grp_fu_175_p0;
reg   [31:0] grp_fu_175_p1;
wire    ap_CS_fsm_state84;
reg   [31:0] grp_fu_179_p0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state29;
reg   [31:0] grp_fu_184_p0;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state45;
wire   [31:0] tmp_i_to_int_fu_261_p1;
wire   [31:0] tmp_i_neg_fu_264_p2;
wire   [31:0] tmp_6_fu_331_p2;
wire   [31:0] tmp_5_fu_325_p2;
wire   [0:0] tmp_s_fu_357_p2;
wire   [0:0] tmp1_fu_372_p2;
wire   [0:0] tmp_7_fu_363_p2;
wire   [31:0] releaseTime_new_1_fu_337_p3;
wire   [31:0] releaseTime_loc_1_fu_343_p3;
wire   [31:0] sustainTime_new_1_fu_350_p3;
wire   [31:0] releaseTime_loc_1_re_fu_390_p3;
wire   [0:0] not_tmp_s_fu_459_p2;
wire   [0:0] tmp_14_fu_451_p2;
wire   [0:0] sel_tmp6_demorgan_fu_475_p2;
wire   [0:0] tmp_18_not_fu_479_p2;
wire   [0:0] sel_tmp13_demorgan_fu_491_p2;
wire   [0:0] tmp_19_not_fu_497_p2;
wire   [0:0] not_sel_tmp7_fu_485_p2;
wire   [0:0] not_sel_tmp_fu_502_p2;
wire   [0:0] tmp3_fu_508_p2;
wire   [0:0] sel_tmp_fu_469_p2;
wire   [0:0] sel_tmp1_fu_520_p2;
wire   [0:0] sel_tmp4_fu_532_p2;
wire   [0:0] or_cond_fu_573_p2;
wire   [0:0] or_cond1_fu_577_p2;
wire   [0:0] or_cond2_fu_581_p2;
wire   [31:0] resultAmplitude_5_fu_593_p3;
wire   [31:0] resultAmplitude_6_fu_600_p3;
reg   [88:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 wave_in_V_0_sel_rd = 1'b0;
#0 wave_in_V_0_sel_wr = 1'b0;
#0 wave_in_V_0_state = 2'd0;
#0 wave_out_V_1_sel_rd = 1'b0;
#0 wave_out_V_1_sel_wr = 1'b0;
#0 wave_out_V_1_state = 2'd0;
#0 guard_variable_for_e_4 = 1'd0;
#0 attackSlope = 32'd0;
#0 guard_variable_for_e_3 = 1'd0;
#0 decaySlope = 32'd0;
#0 guard_variable_for_e_2 = 1'd0;
#0 releaseSlope = 32'd0;
#0 guard_variable_for_e_1 = 1'd0;
#0 releaseTime = 32'd0;
#0 guard_variable_for_e = 1'd0;
#0 sustainTime = 32'd0;
#0 wait_r = 1'd0;
#0 time_r = 32'd0;
#0 ap_CS_fsm = 89'd1;
end

envelope_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
envelope_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .press(press),
    .attackDuration(attackDuration),
    .decayDuration(decayDuration),
    .sustainAmplitude(sustainAmplitude),
    .releaseDuration(releaseDuration)
);

envelope_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_169_p0),
    .din1(grp_fu_169_p1),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

envelope_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_175_p0),
    .din1(grp_fu_175_p1),
    .ce(1'b1),
    .dout(grp_fu_175_p2)
);

envelope_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fdiv_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_179_p0),
    .din1(reg_193),
    .ce(1'b1),
    .dout(grp_fu_179_p2)
);

envelope_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_sitofp_3eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_184_p0),
    .ce(1'b1),
    .dout(grp_fu_184_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == wave_in_V_0_ack_out) & (1'b1 == wave_in_V_0_vld_out))) begin
            wave_in_V_0_sel_rd <= ~wave_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_in))) begin
            wave_in_V_0_sel_wr <= ~wave_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd3)) | ((1'b0 == wave_in_V_0_vld_in) & (wave_in_V_0_state == 2'd2)))) begin
            wave_in_V_0_state <= 2'd2;
        end else if ((((1'b1 == wave_in_V_0_vld_in) & (1'b0 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd3)) | ((1'b0 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd1)))) begin
            wave_in_V_0_state <= 2'd1;
        end else if ((((1'b1 == wave_in_V_0_vld_in) & (wave_in_V_0_state == 2'd2)) | ((1'b1 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd1)) | ((wave_in_V_0_state == 2'd3) & ~((1'b1 == wave_in_V_0_vld_in) & (1'b0 == wave_in_V_0_ack_out)) & ~((1'b0 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_out))))) begin
            wave_in_V_0_state <= 2'd3;
        end else begin
            wave_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == wave_out_V_1_ack_out) & (1'b1 == wave_out_V_1_vld_out))) begin
            wave_out_V_1_sel_rd <= ~wave_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_in))) begin
            wave_out_V_1_sel_wr <= ~wave_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_out) & (2'd3 == wave_out_V_1_state)) | ((1'b0 == wave_out_V_1_vld_in) & (2'd2 == wave_out_V_1_state)))) begin
            wave_out_V_1_state <= 2'd2;
        end else if ((((1'b1 == wave_out_V_1_vld_in) & (1'b0 == wave_out_V_1_ack_out) & (2'd3 == wave_out_V_1_state)) | ((1'b0 == wave_out_V_1_ack_out) & (2'd1 == wave_out_V_1_state)))) begin
            wave_out_V_1_state <= 2'd1;
        end else if ((((1'b1 == wave_out_V_1_vld_in) & (2'd2 == wave_out_V_1_state)) | ((1'b1 == wave_out_V_1_ack_out) & (2'd1 == wave_out_V_1_state)) | ((2'd3 == wave_out_V_1_state) & ~((1'b1 == wave_out_V_1_vld_in) & (1'b0 == wave_out_V_1_ack_out)) & ~((1'b0 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_out))))) begin
            wave_out_V_1_state <= 2'd3;
        end else begin
            wave_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        if ((1'd1 == guard_variable_for_e_3_load_fu_281_p1)) begin
            releaseTime_flag_reg_125 <= 1'd0;
        end else if ((1'd0 == guard_variable_for_e_3_load_fu_281_p1)) begin
            releaseTime_flag_reg_125 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        if ((1'd1 == guard_variable_for_e_3_load_fu_281_p1)) begin
            releaseTime_loc_reg_137 <= releaseTime;
        end else if ((1'd0 == guard_variable_for_e_3_load_fu_281_p1)) begin
            releaseTime_loc_reg_137 <= releaseDuration_read_reg_626;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        if ((1'd1 == guard_variable_for_e_4_load_fu_296_p1)) begin
            sustainTime_flag_reg_147 <= 1'd0;
        end else if ((1'd0 == guard_variable_for_e_4_load_fu_296_p1)) begin
            sustainTime_flag_reg_147 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        if ((1'd1 == guard_variable_for_e_4_load_fu_296_p1)) begin
            sustainTime_loc_reg_160 <= sustainTime;
        end else if ((1'd0 == guard_variable_for_e_4_load_fu_296_p1)) begin
            sustainTime_loc_reg_160 <= grp_fu_188_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        attackDuration_read_reg_651 <= attackDuration;
        decayDuration_read_reg_643 <= decayDuration;
        guard_variable_for_e_reg_664 <= guard_variable_for_e_4;
        press_read_reg_659 <= press;
        releaseDuration_read_reg_626 <= releaseDuration;
        sustainAmplitude_rea_reg_635 <= sustainAmplitude;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'd0 == guard_variable_for_e_reg_664))) begin
        attackSlope <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == guard_variable_for_e_1_reg_668))) begin
        decaySlope <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (1'd0 == guard_variable_for_e_4_load_fu_296_p1))) begin
        guard_variable_for_e <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (1'd0 == guard_variable_for_e_3_load_fu_281_p1))) begin
        guard_variable_for_e_1 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        guard_variable_for_e_1_reg_668 <= guard_variable_for_e_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == guard_variable_for_e_2_load_fu_247_p1))) begin
        guard_variable_for_e_2 <= 1'd1;
        tmp_10_i_reg_681 <= tmp_10_i_fu_251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        guard_variable_for_e_2_reg_677 <= guard_variable_for_e_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & (1'd0 == guard_variable_for_e_1_load_fu_227_p1))) begin
        guard_variable_for_e_3 <= 1'd1;
        tmp_6_i_reg_672 <= tmp_6_i_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'd0 == guard_variable_for_e_load_fu_211_p1))) begin
        guard_variable_for_e_4 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state87)) begin
        not_or_cond_reg_819 <= not_or_cond_fu_587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        not_tmp_3_reg_714 <= not_tmp_3_fu_315_p2;
        tmp_3_reg_707 <= tmp_3_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state50) | ((1'b1 == ap_CS_fsm_state74) & (1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794)) | ((1'b1 == ap_CS_fsm_state74) & (1'd1 == sel_tmp5_reg_794)) | ((1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state79) & (1'd1 == tmp_1_reg_747) & (1'd0 == sel_tmp2_reg_777)))) begin
        reg_193 <= grp_fu_184_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state83)) | ((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state83)))) begin
        reg_199 <= grp_fu_169_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state78)) | ((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state78)) | ((1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'd1 == tmp_1_reg_747) & (1'd0 == sel_tmp2_reg_777) & (1'b1 == ap_CS_fsm_state83)) | ((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state87)))) begin
        reg_205 <= grp_fu_175_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state66) & (1'd0 == guard_variable_for_e_2_reg_677))) begin
        releaseSlope <= grp_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (wave_in_V_0_vld_out == 1'b1) & (1'd1 == releaseTime_flag_1_s_fu_377_p2))) begin
        releaseTime <= releaseTime_new_1_re_fu_383_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state87))) begin
        resultAmplitude_7_reg_824 <= resultAmplitude_7_fu_607_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        sel_tmp2_reg_777 <= sel_tmp2_fu_464_p2;
        sel_tmp3_reg_788 <= sel_tmp3_fu_526_p2;
        sel_tmp5_reg_794 <= sel_tmp5_fu_538_p2;
        sel_tmp8_reg_783 <= sel_tmp8_fu_514_p2;
        tmp_10_reg_767 <= tmp_10_fu_447_p2;
        tmp_16_reg_772 <= tmp_16_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (wave_in_V_0_vld_out == 1'b1) & (1'd1 == sustainTime_flag_1_s_fu_397_p2))) begin
        sustainTime <= sustainTime_new_1_tm_fu_403_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state67) & (wave_in_V_0_vld_out == 1'b1))) begin
        sustainTime_new_1_tm_reg_732 <= sustainTime_new_1_tm_fu_403_p3;
        time_load_s_reg_738 <= time_load_s_fu_411_p3;
        tmp_15_reg_761 <= tmp_15_fu_441_p2;
        tmp_1_reg_747 <= tmp_1_fu_419_p2;
        tmp_21_reg_721 <= wave_in_V_0_data_out;
        tmp_9_reg_755 <= tmp_9_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        time_r <= tmp_20_fu_547_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        wait_flag_1_reg_800 <= wait_flag_1_fu_543_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state89) & (wave_out_V_1_ack_in == 1'b1) & (1'd1 == wait_flag_1_reg_800))) begin
        wait_r <= not_or_cond_reg_819;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_in_V_0_load_A)) begin
        wave_in_V_0_payload_A <= wave_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_in_V_0_load_B)) begin
        wave_in_V_0_payload_B <= wave_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_out_V_1_load_A)) begin
        wave_out_V_1_payload_A <= resultAmplitude_fu_614_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_out_V_1_load_B)) begin
        wave_out_V_1_payload_B <= resultAmplitude_fu_614_p3;
    end
end

always @ (*) begin
    if ((((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state79)) | ((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state79)))) begin
        grp_fu_169_p0 = reg_205;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_169_p0 = sustainAmplitude_rea_reg_635;
    end else begin
        grp_fu_169_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state79))) begin
        grp_fu_169_p1 = sustainAmplitude_rea_reg_635;
    end else if (((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state79))) begin
        grp_fu_169_p1 = 32'd1073741824;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_169_p1 = 32'd3221225472;
    end else begin
        grp_fu_169_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'd1 == tmp_1_reg_747) & (1'd0 == sel_tmp2_reg_777) & (1'b1 == ap_CS_fsm_state84)) | ((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state84)) | ((1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state84) & (1'd1 == sel_tmp3_reg_788)) | ((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state84)))) begin
        grp_fu_175_p0 = tmp_21_reg_721;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        grp_fu_175_p0 = attackSlope;
    end else if (((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state75))) begin
        grp_fu_175_p0 = releaseSlope;
    end else if (((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state75))) begin
        grp_fu_175_p0 = decaySlope;
    end else begin
        grp_fu_175_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state84) & (1'd1 == sel_tmp3_reg_788))) begin
        grp_fu_175_p1 = sustainAmplitude_rea_reg_635;
    end else if ((((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state84)) | ((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state84)))) begin
        grp_fu_175_p1 = reg_199;
    end else if (((1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'd1 == tmp_1_reg_747) & (1'd0 == sel_tmp2_reg_777) & (1'b1 == ap_CS_fsm_state84))) begin
        grp_fu_175_p1 = reg_205;
    end else if ((((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state75)) | ((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state75)) | (1'b1 == ap_CS_fsm_state80))) begin
        grp_fu_175_p1 = reg_193;
    end else begin
        grp_fu_175_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        grp_fu_179_p0 = tmp_i_fu_270_p1;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_179_p0 = reg_199;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_179_p0 = 32'd1073741824;
    end else begin
        grp_fu_179_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_184_p0 = time_load_s_reg_738;
    end else if (((1'd1 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state69))) begin
        grp_fu_184_p0 = tmp_16_reg_772;
    end else if (((1'd1 == sel_tmp2_reg_777) & (1'd0 == sel_tmp3_reg_788) & (1'd0 == sel_tmp5_reg_794) & (1'b1 == ap_CS_fsm_state69))) begin
        grp_fu_184_p0 = tmp_10_reg_767;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_fu_184_p0 = tmp_10_i_reg_681;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_184_p0 = tmp_6_i_reg_672;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_184_p0 = attackDuration;
    end else begin
        grp_fu_184_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) & (wave_in_V_0_vld_out == 1'b1))) begin
        wave_in_V_0_ack_out = 1'b1;
    end else begin
        wave_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == wave_in_V_0_sel)) begin
        wave_in_V_0_data_out = wave_in_V_0_payload_B;
    end else begin
        wave_in_V_0_data_out = wave_in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        wave_in_V_TDATA_blk_n = wave_in_V_0_state[1'd0];
    end else begin
        wave_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == wave_out_V_1_sel)) begin
        wave_out_V_1_data_out = wave_out_V_1_payload_B;
    end else begin
        wave_out_V_1_data_out = wave_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) & (wave_out_V_1_ack_in == 1'b1))) begin
        wave_out_V_1_vld_in = 1'b1;
    end else begin
        wave_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state89))) begin
        wave_out_V_TDATA_blk_n = wave_out_V_1_state[1'd1];
    end else begin
        wave_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'd1 == guard_variable_for_e_load_fu_211_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'd1 == guard_variable_for_e_1_load_fu_227_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (1'd1 == guard_variable_for_e_2_load_fu_247_p1))) begin
                ap_NS_fsm = ap_ST_fsm_state66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (wave_in_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            if (((1'b1 == ap_CS_fsm_state88) & (wave_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end
        end
        ap_ST_fsm_state89 : begin
            if (((1'b1 == ap_CS_fsm_state89) & (wave_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state89;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_188_p2 = (decayDuration_read_reg_643 + 32'd1);

assign guard_variable_for_e_1_load_fu_227_p1 = guard_variable_for_e_3;

assign guard_variable_for_e_2_load_fu_247_p1 = guard_variable_for_e_2;

assign guard_variable_for_e_3_load_fu_281_p1 = guard_variable_for_e_1;

assign guard_variable_for_e_4_load_fu_296_p1 = guard_variable_for_e;

assign guard_variable_for_e_load_fu_211_p1 = guard_variable_for_e_4;

assign not_or_cond_fu_587_p2 = (or_cond2_fu_581_p2 ^ 1'd1);

assign not_sel_tmp7_fu_485_p2 = (sel_tmp6_demorgan_fu_475_p2 | tmp_18_not_fu_479_p2);

assign not_sel_tmp_fu_502_p2 = (sel_tmp13_demorgan_fu_491_p2 | tmp_19_not_fu_497_p2);

assign not_tmp_3_fu_315_p2 = (tmp_3_fu_310_p2 ^ 1'd1);

assign not_tmp_s_fu_459_p2 = (tmp_1_reg_747 ^ 1'd1);

assign or_cond1_fu_577_p2 = (sel_tmp2_reg_777 | tmp_1_reg_747);

assign or_cond2_fu_581_p2 = (or_cond_fu_573_p2 | or_cond1_fu_577_p2);

assign or_cond_fu_573_p2 = (sel_tmp5_reg_794 | sel_tmp3_reg_788);

assign releaseTime_flag_1_s_fu_377_p2 = (tmp1_fu_372_p2 | releaseTime_flag_reg_125);

assign releaseTime_loc_1_fu_343_p3 = ((tmp_3_reg_707[0:0] === 1'b1) ? releaseTime_loc_reg_137 : tmp_6_fu_331_p2);

assign releaseTime_loc_1_re_fu_390_p3 = ((tmp_7_fu_363_p2[0:0] === 1'b1) ? releaseTime_loc_1_fu_343_p3 : releaseDuration_read_reg_626);

assign releaseTime_new_1_fu_337_p3 = ((tmp_3_reg_707[0:0] === 1'b1) ? releaseDuration_read_reg_626 : tmp_6_fu_331_p2);

assign releaseTime_new_1_re_fu_383_p3 = ((tmp_7_fu_363_p2[0:0] === 1'b1) ? releaseTime_new_1_fu_337_p3 : releaseDuration_read_reg_626);

assign resultAmplitude_5_fu_593_p3 = ((tmp_1_reg_747[0:0] === 1'b1) ? grp_fu_175_p2 : 32'd0);

assign resultAmplitude_6_fu_600_p3 = ((sel_tmp2_reg_777[0:0] === 1'b1) ? grp_fu_175_p2 : resultAmplitude_5_fu_593_p3);

assign resultAmplitude_7_fu_607_p3 = ((sel_tmp3_reg_788[0:0] === 1'b1) ? grp_fu_175_p2 : resultAmplitude_6_fu_600_p3);

assign resultAmplitude_fu_614_p3 = ((sel_tmp5_reg_794[0:0] === 1'b1) ? reg_205 : resultAmplitude_7_reg_824);

assign sel_tmp13_demorgan_fu_491_p2 = (sel_tmp6_demorgan_fu_475_p2 | tmp_14_fu_451_p2);

assign sel_tmp1_fu_520_p2 = (sel_tmp6_demorgan_fu_475_p2 ^ 1'd1);

assign sel_tmp2_fu_464_p2 = (tmp_9_reg_755 & not_tmp_s_fu_459_p2);

assign sel_tmp3_fu_526_p2 = (tmp_14_fu_451_p2 & sel_tmp1_fu_520_p2);

assign sel_tmp4_fu_532_p2 = (sel_tmp13_demorgan_fu_491_p2 ^ 1'd1);

assign sel_tmp5_fu_538_p2 = (tmp_15_reg_761 & sel_tmp4_fu_532_p2);

assign sel_tmp6_demorgan_fu_475_p2 = (tmp_1_reg_747 | tmp_9_reg_755);

assign sel_tmp8_fu_514_p2 = (tmp3_fu_508_p2 & sel_tmp_fu_469_p2);

assign sel_tmp_fu_469_p2 = (sel_tmp2_fu_464_p2 ^ not_tmp_s_fu_459_p2);

assign sustainTime_flag_1_s_fu_397_p2 = (tmp1_fu_372_p2 | sustainTime_flag_reg_147);

assign sustainTime_new_1_fu_350_p3 = ((tmp_3_reg_707[0:0] === 1'b1) ? sustainTime_loc_reg_160 : tmp_5_fu_325_p2);

assign sustainTime_new_1_tm_fu_403_p3 = ((tmp_7_fu_363_p2[0:0] === 1'b1) ? sustainTime_new_1_fu_350_p3 : grp_fu_188_p2);

assign time_load_s_fu_411_p3 = ((tmp_7_fu_363_p2[0:0] === 1'b1) ? time_r : 32'd0);

assign tmp1_fu_372_p2 = (wait_r | not_tmp_3_reg_714);

assign tmp3_fu_508_p2 = (not_sel_tmp7_fu_485_p2 & not_sel_tmp_fu_502_p2);

assign tmp_10_fu_447_p2 = (time_load_s_reg_738 - attackDuration_read_reg_651);

assign tmp_10_i_fu_251_p2 = (releaseDuration_read_reg_626 - decayDuration_read_reg_643);

assign tmp_14_fu_451_p2 = (($signed(time_load_s_reg_738) < $signed(sustainTime_new_1_tm_reg_732)) ? 1'b1 : 1'b0);

assign tmp_15_fu_441_p2 = (($signed(time_load_s_fu_411_p3) < $signed(releaseTime_loc_1_re_fu_390_p3)) ? 1'b1 : 1'b0);

assign tmp_16_fu_455_p2 = (time_load_s_reg_738 - sustainTime_new_1_tm_reg_732);

assign tmp_18_not_fu_479_p2 = (tmp_14_fu_451_p2 ^ 1'd1);

assign tmp_19_not_fu_497_p2 = (tmp_15_reg_761 ^ 1'd1);

assign tmp_1_fu_419_p2 = (($signed(time_load_s_fu_411_p3) < $signed(attackDuration_read_reg_651)) ? 1'b1 : 1'b0);

assign tmp_20_fu_547_p2 = (time_load_s_reg_738 + 32'd1);

assign tmp_3_fu_310_p2 = ((press_read_reg_659 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_5_fu_325_p2 = (sustainTime_loc_reg_160 + 32'd1);

assign tmp_6_fu_331_p2 = (releaseTime_loc_reg_137 + 32'd1);

assign tmp_6_i_fu_231_p2 = (decayDuration_read_reg_643 - attackDuration_read_reg_651);

assign tmp_7_fu_363_p2 = (tmp_s_fu_357_p2 | not_tmp_3_reg_714);

assign tmp_9_fu_436_p2 = (($signed(time_load_s_fu_411_p3) < $signed(decayDuration_read_reg_643)) ? 1'b1 : 1'b0);

assign tmp_i_fu_270_p1 = tmp_i_neg_fu_264_p2;

assign tmp_i_neg_fu_264_p2 = (tmp_i_to_int_fu_261_p1 ^ 32'd2147483648);

assign tmp_i_to_int_fu_261_p1 = sustainAmplitude_rea_reg_635;

assign tmp_s_fu_357_p2 = (wait_r ^ 1'd1);

assign wait_flag_1_fu_543_p2 = (sel_tmp8_reg_783 | not_tmp_3_reg_714);

assign wave_in_V_0_ack_in = wave_in_V_0_state[1'd1];

assign wave_in_V_0_load_A = (wave_in_V_0_state_cmp_full & ~wave_in_V_0_sel_wr);

assign wave_in_V_0_load_B = (wave_in_V_0_sel_wr & wave_in_V_0_state_cmp_full);

assign wave_in_V_0_sel = wave_in_V_0_sel_rd;

assign wave_in_V_0_state_cmp_full = ((wave_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign wave_in_V_0_vld_in = wave_in_V_TVALID;

assign wave_in_V_0_vld_out = wave_in_V_0_state[1'd0];

assign wave_in_V_TREADY = wave_in_V_0_state[1'd1];

assign wave_out_V_1_ack_in = wave_out_V_1_state[1'd1];

assign wave_out_V_1_ack_out = wave_out_V_TREADY;

assign wave_out_V_1_load_A = (wave_out_V_1_state_cmp_full & ~wave_out_V_1_sel_wr);

assign wave_out_V_1_load_B = (wave_out_V_1_sel_wr & wave_out_V_1_state_cmp_full);

assign wave_out_V_1_sel = wave_out_V_1_sel_rd;

assign wave_out_V_1_state_cmp_full = ((wave_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign wave_out_V_1_vld_out = wave_out_V_1_state[1'd0];

assign wave_out_V_TDATA = wave_out_V_1_data_out;

assign wave_out_V_TVALID = wave_out_V_1_state[1'd0];

endmodule //envelope
