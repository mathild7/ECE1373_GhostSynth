// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="xbarfloat,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.832000,HLS_SYN_LAT=4,HLS_SYN_TPT=5,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2475,HLS_SYN_LUT=1066}" *)

module xbarfloat (
        ap_clk,
        ap_rst_n,
        in0_V_TDATA,
        in0_V_TVALID,
        in0_V_TREADY,
        in1_V_TDATA,
        in1_V_TVALID,
        in1_V_TREADY,
        in2_V_TDATA,
        in2_V_TVALID,
        in2_V_TREADY,
        in3_V_TDATA,
        in3_V_TVALID,
        in3_V_TREADY,
        out0_V_TDATA,
        out0_V_TVALID,
        out0_V_TREADY,
        out1_V_TDATA,
        out1_V_TVALID,
        out1_V_TREADY,
        out2_V_TDATA,
        out2_V_TVALID,
        out2_V_TREADY,
        out3_V_TDATA,
        out3_V_TVALID,
        out3_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] in0_V_TDATA;
input   in0_V_TVALID;
output   in0_V_TREADY;
input  [31:0] in1_V_TDATA;
input   in1_V_TVALID;
output   in1_V_TREADY;
input  [31:0] in2_V_TDATA;
input   in2_V_TVALID;
output   in2_V_TREADY;
input  [31:0] in3_V_TDATA;
input   in3_V_TVALID;
output   in3_V_TREADY;
output  [31:0] out0_V_TDATA;
output   out0_V_TVALID;
input   out0_V_TREADY;
output  [31:0] out1_V_TDATA;
output   out1_V_TVALID;
input   out1_V_TREADY;
output  [31:0] out2_V_TDATA;
output   out2_V_TVALID;
input   out2_V_TREADY;
output  [31:0] out3_V_TDATA;
output   out3_V_TVALID;
input   out3_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] in0_V_0_data_out;
wire    in0_V_0_vld_in;
wire    in0_V_0_vld_out;
wire    in0_V_0_ack_in;
reg    in0_V_0_ack_out;
reg   [31:0] in0_V_0_payload_A;
reg   [31:0] in0_V_0_payload_B;
reg    in0_V_0_sel_rd;
reg    in0_V_0_sel_wr;
wire    in0_V_0_sel;
wire    in0_V_0_load_A;
wire    in0_V_0_load_B;
reg   [1:0] in0_V_0_state;
wire    in0_V_0_state_cmp_full;
reg   [31:0] in1_V_0_data_out;
wire    in1_V_0_vld_in;
wire    in1_V_0_vld_out;
wire    in1_V_0_ack_in;
reg    in1_V_0_ack_out;
reg   [31:0] in1_V_0_payload_A;
reg   [31:0] in1_V_0_payload_B;
reg    in1_V_0_sel_rd;
reg    in1_V_0_sel_wr;
wire    in1_V_0_sel;
wire    in1_V_0_load_A;
wire    in1_V_0_load_B;
reg   [1:0] in1_V_0_state;
wire    in1_V_0_state_cmp_full;
reg   [31:0] in2_V_0_data_out;
wire    in2_V_0_vld_in;
wire    in2_V_0_vld_out;
wire    in2_V_0_ack_in;
reg    in2_V_0_ack_out;
reg   [31:0] in2_V_0_payload_A;
reg   [31:0] in2_V_0_payload_B;
reg    in2_V_0_sel_rd;
reg    in2_V_0_sel_wr;
wire    in2_V_0_sel;
wire    in2_V_0_load_A;
wire    in2_V_0_load_B;
reg   [1:0] in2_V_0_state;
wire    in2_V_0_state_cmp_full;
reg   [31:0] in3_V_0_data_out;
wire    in3_V_0_vld_in;
wire    in3_V_0_vld_out;
wire    in3_V_0_ack_in;
reg    in3_V_0_ack_out;
reg   [31:0] in3_V_0_payload_A;
reg   [31:0] in3_V_0_payload_B;
reg    in3_V_0_sel_rd;
reg    in3_V_0_sel_wr;
wire    in3_V_0_sel;
wire    in3_V_0_load_A;
wire    in3_V_0_load_B;
reg   [1:0] in3_V_0_state;
wire    in3_V_0_state_cmp_full;
reg   [31:0] out0_V_1_data_out;
reg    out0_V_1_vld_in;
wire    out0_V_1_vld_out;
wire    out0_V_1_ack_in;
wire    out0_V_1_ack_out;
reg   [31:0] out0_V_1_payload_A;
reg   [31:0] out0_V_1_payload_B;
reg    out0_V_1_sel_rd;
reg    out0_V_1_sel_wr;
wire    out0_V_1_sel;
wire    out0_V_1_load_A;
wire    out0_V_1_load_B;
reg   [1:0] out0_V_1_state;
wire    out0_V_1_state_cmp_full;
reg   [31:0] out1_V_1_data_out;
reg    out1_V_1_vld_in;
wire    out1_V_1_vld_out;
wire    out1_V_1_ack_in;
wire    out1_V_1_ack_out;
reg   [31:0] out1_V_1_payload_A;
reg   [31:0] out1_V_1_payload_B;
reg    out1_V_1_sel_rd;
reg    out1_V_1_sel_wr;
wire    out1_V_1_sel;
wire    out1_V_1_load_A;
wire    out1_V_1_load_B;
reg   [1:0] out1_V_1_state;
wire    out1_V_1_state_cmp_full;
reg   [31:0] out2_V_1_data_out;
reg    out2_V_1_vld_in;
wire    out2_V_1_vld_out;
wire    out2_V_1_ack_in;
wire    out2_V_1_ack_out;
reg   [31:0] out2_V_1_payload_A;
reg   [31:0] out2_V_1_payload_B;
reg    out2_V_1_sel_rd;
reg    out2_V_1_sel_wr;
wire    out2_V_1_sel;
wire    out2_V_1_load_A;
wire    out2_V_1_load_B;
reg   [1:0] out2_V_1_state;
wire    out2_V_1_state_cmp_full;
reg   [31:0] out3_V_1_data_out;
reg    out3_V_1_vld_in;
wire    out3_V_1_vld_out;
wire    out3_V_1_ack_in;
wire    out3_V_1_ack_out;
reg   [31:0] out3_V_1_payload_A;
reg   [31:0] out3_V_1_payload_B;
reg    out3_V_1_sel_rd;
reg    out3_V_1_sel_wr;
wire    out3_V_1_sel;
wire    out3_V_1_load_A;
wire    out3_V_1_load_B;
reg   [1:0] out3_V_1_state;
wire    out3_V_1_state_cmp_full;
wire   [31:0] src0;
wire   [31:0] src1;
wire   [31:0] src2;
wire   [31:0] src3;
reg    in0_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state4;
reg   [0:0] toTransfer_0_3_reg_505;
reg    in1_V_TDATA_blk_n;
reg   [0:0] toTransfer_1_3_reg_509;
reg    in2_V_TDATA_blk_n;
reg   [0:0] toTransfer_2_3_reg_513;
reg    in3_V_TDATA_blk_n;
reg   [0:0] toTransfer_3_3_reg_517;
reg    out0_V_TDATA_blk_n;
wire    ap_CS_fsm_state5;
reg    out1_V_TDATA_blk_n;
reg    out2_V_TDATA_blk_n;
reg    out3_V_TDATA_blk_n;
wire   [1:0] tmp_fu_189_p1;
reg   [1:0] tmp_reg_469;
wire    ap_CS_fsm_state1;
wire   [1:0] tmp_1_fu_193_p1;
reg   [1:0] tmp_1_reg_478;
wire   [1:0] tmp_2_fu_197_p1;
reg   [1:0] tmp_2_reg_487;
wire   [1:0] tmp_3_fu_201_p1;
reg   [1:0] tmp_3_reg_496;
wire   [0:0] toTransfer_0_3_fu_361_p6;
wire    ap_CS_fsm_state2;
wire   [0:0] toTransfer_1_3_fu_374_p6;
wire   [0:0] toTransfer_2_3_fu_387_p6;
wire   [0:0] toTransfer_3_3_fu_400_p6;
wire   [31:0] tmp_4_fu_413_p6;
reg    ap_block_state4;
reg    ap_block_state4_io;
wire   [31:0] tmp_6_fu_427_p6;
wire   [31:0] tmp_8_fu_441_p6;
wire   [31:0] tmp_9_fu_455_p6;
reg   [31:0] tmp_0_s_phi_fu_148_p4;
reg   [31:0] tmp_0_s_reg_144;
reg    ap_block_state5;
reg    ap_block_state5_io;
wire   [0:0] toTransfer_fu_205_p6;
wire   [0:0] toTransfer_1_fu_218_p6;
wire   [0:0] toTransfer_2_fu_231_p6;
wire   [0:0] toTransfer_3_fu_244_p6;
wire   [0:0] toTransfer_0_1_fu_257_p6;
wire   [0:0] toTransfer_1_1_fu_270_p6;
wire   [0:0] toTransfer_2_1_fu_283_p6;
wire   [0:0] toTransfer_3_1_fu_296_p6;
wire   [0:0] toTransfer_0_2_fu_309_p6;
wire   [0:0] toTransfer_1_2_fu_322_p6;
wire   [0:0] toTransfer_2_2_fu_335_p6;
wire   [0:0] toTransfer_3_2_fu_348_p6;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 in0_V_0_sel_rd = 1'b0;
#0 in0_V_0_sel_wr = 1'b0;
#0 in0_V_0_state = 2'd0;
#0 in1_V_0_sel_rd = 1'b0;
#0 in1_V_0_sel_wr = 1'b0;
#0 in1_V_0_state = 2'd0;
#0 in2_V_0_sel_rd = 1'b0;
#0 in2_V_0_sel_wr = 1'b0;
#0 in2_V_0_state = 2'd0;
#0 in3_V_0_sel_rd = 1'b0;
#0 in3_V_0_sel_wr = 1'b0;
#0 in3_V_0_state = 2'd0;
#0 out0_V_1_sel_rd = 1'b0;
#0 out0_V_1_sel_wr = 1'b0;
#0 out0_V_1_state = 2'd0;
#0 out1_V_1_sel_rd = 1'b0;
#0 out1_V_1_sel_wr = 1'b0;
#0 out1_V_1_state = 2'd0;
#0 out2_V_1_sel_rd = 1'b0;
#0 out2_V_1_sel_wr = 1'b0;
#0 out2_V_1_state = 2'd0;
#0 out3_V_1_sel_rd = 1'b0;
#0 out3_V_1_sel_wr = 1'b0;
#0 out3_V_1_state = 2'd0;
#0 ap_CS_fsm = 5'd1;
end

xbarfloat_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
xbarfloat_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .src0(src0),
    .src1(src1),
    .src2(src2),
    .src3(src3)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U1(
    .din1(1'd1),
    .din2(1'd0),
    .din3(1'd0),
    .din4(1'd0),
    .din5(tmp_reg_469),
    .dout(toTransfer_fu_205_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U2(
    .din1(1'd0),
    .din2(1'd1),
    .din3(1'd0),
    .din4(1'd0),
    .din5(tmp_reg_469),
    .dout(toTransfer_1_fu_218_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U3(
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd1),
    .din4(1'd0),
    .din5(tmp_reg_469),
    .dout(toTransfer_2_fu_231_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U4(
    .din1(1'd0),
    .din2(1'd0),
    .din3(1'd0),
    .din4(1'd1),
    .din5(tmp_reg_469),
    .dout(toTransfer_3_fu_244_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U5(
    .din1(1'd1),
    .din2(toTransfer_fu_205_p6),
    .din3(toTransfer_fu_205_p6),
    .din4(toTransfer_fu_205_p6),
    .din5(tmp_1_reg_478),
    .dout(toTransfer_0_1_fu_257_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U6(
    .din1(toTransfer_1_fu_218_p6),
    .din2(1'd1),
    .din3(toTransfer_1_fu_218_p6),
    .din4(toTransfer_1_fu_218_p6),
    .din5(tmp_1_reg_478),
    .dout(toTransfer_1_1_fu_270_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U7(
    .din1(toTransfer_2_fu_231_p6),
    .din2(toTransfer_2_fu_231_p6),
    .din3(1'd1),
    .din4(toTransfer_2_fu_231_p6),
    .din5(tmp_1_reg_478),
    .dout(toTransfer_2_1_fu_283_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U8(
    .din1(toTransfer_3_fu_244_p6),
    .din2(toTransfer_3_fu_244_p6),
    .din3(toTransfer_3_fu_244_p6),
    .din4(1'd1),
    .din5(tmp_1_reg_478),
    .dout(toTransfer_3_1_fu_296_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U9(
    .din1(1'd1),
    .din2(toTransfer_0_1_fu_257_p6),
    .din3(toTransfer_0_1_fu_257_p6),
    .din4(toTransfer_0_1_fu_257_p6),
    .din5(tmp_2_reg_487),
    .dout(toTransfer_0_2_fu_309_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U10(
    .din1(toTransfer_1_1_fu_270_p6),
    .din2(1'd1),
    .din3(toTransfer_1_1_fu_270_p6),
    .din4(toTransfer_1_1_fu_270_p6),
    .din5(tmp_2_reg_487),
    .dout(toTransfer_1_2_fu_322_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U11(
    .din1(toTransfer_2_1_fu_283_p6),
    .din2(toTransfer_2_1_fu_283_p6),
    .din3(1'd1),
    .din4(toTransfer_2_1_fu_283_p6),
    .din5(tmp_2_reg_487),
    .dout(toTransfer_2_2_fu_335_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U12(
    .din1(toTransfer_3_1_fu_296_p6),
    .din2(toTransfer_3_1_fu_296_p6),
    .din3(toTransfer_3_1_fu_296_p6),
    .din4(1'd1),
    .din5(tmp_2_reg_487),
    .dout(toTransfer_3_2_fu_348_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U13(
    .din1(1'd1),
    .din2(toTransfer_0_2_fu_309_p6),
    .din3(toTransfer_0_2_fu_309_p6),
    .din4(toTransfer_0_2_fu_309_p6),
    .din5(tmp_3_reg_496),
    .dout(toTransfer_0_3_fu_361_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U14(
    .din1(toTransfer_1_2_fu_322_p6),
    .din2(1'd1),
    .din3(toTransfer_1_2_fu_322_p6),
    .din4(toTransfer_1_2_fu_322_p6),
    .din5(tmp_3_reg_496),
    .dout(toTransfer_1_3_fu_374_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U15(
    .din1(toTransfer_2_2_fu_335_p6),
    .din2(toTransfer_2_2_fu_335_p6),
    .din3(1'd1),
    .din4(toTransfer_2_2_fu_335_p6),
    .din5(tmp_3_reg_496),
    .dout(toTransfer_2_3_fu_387_p6)
);

xbarfloat_mux_42_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 1 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
xbarfloat_mux_42_bkb_U16(
    .din1(toTransfer_3_2_fu_348_p6),
    .din2(toTransfer_3_2_fu_348_p6),
    .din3(toTransfer_3_2_fu_348_p6),
    .din4(1'd1),
    .din5(tmp_3_reg_496),
    .dout(toTransfer_3_3_fu_400_p6)
);

xbarfloat_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
xbarfloat_mux_42_cud_U17(
    .din1(tmp_0_s_phi_fu_148_p4),
    .din2(in1_V_0_data_out),
    .din3(in2_V_0_data_out),
    .din4(in3_V_0_data_out),
    .din5(tmp_reg_469),
    .dout(tmp_4_fu_413_p6)
);

xbarfloat_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
xbarfloat_mux_42_cud_U18(
    .din1(tmp_0_s_phi_fu_148_p4),
    .din2(in1_V_0_data_out),
    .din3(in2_V_0_data_out),
    .din4(in3_V_0_data_out),
    .din5(tmp_1_reg_478),
    .dout(tmp_6_fu_427_p6)
);

xbarfloat_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
xbarfloat_mux_42_cud_U19(
    .din1(tmp_0_s_phi_fu_148_p4),
    .din2(in1_V_0_data_out),
    .din3(in2_V_0_data_out),
    .din4(in3_V_0_data_out),
    .din5(tmp_2_reg_487),
    .dout(tmp_8_fu_441_p6)
);

xbarfloat_mux_42_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
xbarfloat_mux_42_cud_U20(
    .din1(tmp_0_s_phi_fu_148_p4),
    .din2(in1_V_0_data_out),
    .din3(in2_V_0_data_out),
    .din4(in3_V_0_data_out),
    .din5(tmp_3_reg_496),
    .dout(tmp_9_fu_455_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in0_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in0_V_0_ack_out) & (1'b1 == in0_V_0_vld_out))) begin
            in0_V_0_sel_rd <= ~in0_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in0_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in0_V_0_vld_in) & (1'b1 == in0_V_0_ack_in))) begin
            in0_V_0_sel_wr <= ~in0_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in0_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in0_V_0_vld_in) & (1'b1 == in0_V_0_ack_out) & (in0_V_0_state == 2'd3)) | ((1'b0 == in0_V_0_vld_in) & (in0_V_0_state == 2'd2)))) begin
            in0_V_0_state <= 2'd2;
        end else if ((((1'b1 == in0_V_0_vld_in) & (1'b0 == in0_V_0_ack_out) & (in0_V_0_state == 2'd3)) | ((1'b0 == in0_V_0_ack_out) & (in0_V_0_state == 2'd1)))) begin
            in0_V_0_state <= 2'd1;
        end else if ((((1'b1 == in0_V_0_vld_in) & (in0_V_0_state == 2'd2)) | ((1'b1 == in0_V_0_ack_out) & (in0_V_0_state == 2'd1)) | ((in0_V_0_state == 2'd3) & ~((1'b1 == in0_V_0_vld_in) & (1'b0 == in0_V_0_ack_out)) & ~((1'b0 == in0_V_0_vld_in) & (1'b1 == in0_V_0_ack_out))))) begin
            in0_V_0_state <= 2'd3;
        end else begin
            in0_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in1_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in1_V_0_ack_out) & (1'b1 == in1_V_0_vld_out))) begin
            in1_V_0_sel_rd <= ~in1_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in1_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in1_V_0_vld_in) & (1'b1 == in1_V_0_ack_in))) begin
            in1_V_0_sel_wr <= ~in1_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in1_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in1_V_0_vld_in) & (1'b1 == in1_V_0_ack_out) & (2'd3 == in1_V_0_state)) | ((1'b0 == in1_V_0_vld_in) & (2'd2 == in1_V_0_state)))) begin
            in1_V_0_state <= 2'd2;
        end else if ((((1'b1 == in1_V_0_vld_in) & (1'b0 == in1_V_0_ack_out) & (2'd3 == in1_V_0_state)) | ((1'b0 == in1_V_0_ack_out) & (2'd1 == in1_V_0_state)))) begin
            in1_V_0_state <= 2'd1;
        end else if ((((1'b1 == in1_V_0_vld_in) & (2'd2 == in1_V_0_state)) | ((1'b1 == in1_V_0_ack_out) & (2'd1 == in1_V_0_state)) | ((2'd3 == in1_V_0_state) & ~((1'b1 == in1_V_0_vld_in) & (1'b0 == in1_V_0_ack_out)) & ~((1'b0 == in1_V_0_vld_in) & (1'b1 == in1_V_0_ack_out))))) begin
            in1_V_0_state <= 2'd3;
        end else begin
            in1_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in2_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in2_V_0_ack_out) & (1'b1 == in2_V_0_vld_out))) begin
            in2_V_0_sel_rd <= ~in2_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in2_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in2_V_0_vld_in) & (1'b1 == in2_V_0_ack_in))) begin
            in2_V_0_sel_wr <= ~in2_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in2_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in2_V_0_vld_in) & (1'b1 == in2_V_0_ack_out) & (2'd3 == in2_V_0_state)) | ((1'b0 == in2_V_0_vld_in) & (2'd2 == in2_V_0_state)))) begin
            in2_V_0_state <= 2'd2;
        end else if ((((1'b1 == in2_V_0_vld_in) & (1'b0 == in2_V_0_ack_out) & (2'd3 == in2_V_0_state)) | ((1'b0 == in2_V_0_ack_out) & (2'd1 == in2_V_0_state)))) begin
            in2_V_0_state <= 2'd1;
        end else if ((((1'b1 == in2_V_0_vld_in) & (2'd2 == in2_V_0_state)) | ((1'b1 == in2_V_0_ack_out) & (2'd1 == in2_V_0_state)) | ((2'd3 == in2_V_0_state) & ~((1'b1 == in2_V_0_vld_in) & (1'b0 == in2_V_0_ack_out)) & ~((1'b0 == in2_V_0_vld_in) & (1'b1 == in2_V_0_ack_out))))) begin
            in2_V_0_state <= 2'd3;
        end else begin
            in2_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in3_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in3_V_0_ack_out) & (1'b1 == in3_V_0_vld_out))) begin
            in3_V_0_sel_rd <= ~in3_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in3_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in3_V_0_vld_in) & (1'b1 == in3_V_0_ack_in))) begin
            in3_V_0_sel_wr <= ~in3_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in3_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in3_V_0_vld_in) & (1'b1 == in3_V_0_ack_out) & (2'd3 == in3_V_0_state)) | ((1'b0 == in3_V_0_vld_in) & (2'd2 == in3_V_0_state)))) begin
            in3_V_0_state <= 2'd2;
        end else if ((((1'b1 == in3_V_0_vld_in) & (1'b0 == in3_V_0_ack_out) & (2'd3 == in3_V_0_state)) | ((1'b0 == in3_V_0_ack_out) & (2'd1 == in3_V_0_state)))) begin
            in3_V_0_state <= 2'd1;
        end else if ((((1'b1 == in3_V_0_vld_in) & (2'd2 == in3_V_0_state)) | ((1'b1 == in3_V_0_ack_out) & (2'd1 == in3_V_0_state)) | ((2'd3 == in3_V_0_state) & ~((1'b1 == in3_V_0_vld_in) & (1'b0 == in3_V_0_ack_out)) & ~((1'b0 == in3_V_0_vld_in) & (1'b1 == in3_V_0_ack_out))))) begin
            in3_V_0_state <= 2'd3;
        end else begin
            in3_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out0_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out0_V_1_ack_out) & (1'b1 == out0_V_1_vld_out))) begin
            out0_V_1_sel_rd <= ~out0_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out0_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out0_V_1_vld_in) & (1'b1 == out0_V_1_ack_in))) begin
            out0_V_1_sel_wr <= ~out0_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out0_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out0_V_1_vld_in) & (1'b1 == out0_V_1_ack_out) & (2'd3 == out0_V_1_state)) | ((1'b0 == out0_V_1_vld_in) & (2'd2 == out0_V_1_state)))) begin
            out0_V_1_state <= 2'd2;
        end else if ((((1'b1 == out0_V_1_vld_in) & (1'b0 == out0_V_1_ack_out) & (2'd3 == out0_V_1_state)) | ((1'b0 == out0_V_1_ack_out) & (2'd1 == out0_V_1_state)))) begin
            out0_V_1_state <= 2'd1;
        end else if ((((1'b1 == out0_V_1_vld_in) & (2'd2 == out0_V_1_state)) | ((1'b1 == out0_V_1_ack_out) & (2'd1 == out0_V_1_state)) | ((2'd3 == out0_V_1_state) & ~((1'b1 == out0_V_1_vld_in) & (1'b0 == out0_V_1_ack_out)) & ~((1'b0 == out0_V_1_vld_in) & (1'b1 == out0_V_1_ack_out))))) begin
            out0_V_1_state <= 2'd3;
        end else begin
            out0_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out1_V_1_ack_out) & (1'b1 == out1_V_1_vld_out))) begin
            out1_V_1_sel_rd <= ~out1_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out1_V_1_vld_in) & (1'b1 == out1_V_1_ack_in))) begin
            out1_V_1_sel_wr <= ~out1_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out1_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out1_V_1_vld_in) & (1'b1 == out1_V_1_ack_out) & (2'd3 == out1_V_1_state)) | ((1'b0 == out1_V_1_vld_in) & (2'd2 == out1_V_1_state)))) begin
            out1_V_1_state <= 2'd2;
        end else if ((((1'b1 == out1_V_1_vld_in) & (1'b0 == out1_V_1_ack_out) & (2'd3 == out1_V_1_state)) | ((1'b0 == out1_V_1_ack_out) & (2'd1 == out1_V_1_state)))) begin
            out1_V_1_state <= 2'd1;
        end else if ((((1'b1 == out1_V_1_vld_in) & (2'd2 == out1_V_1_state)) | ((1'b1 == out1_V_1_ack_out) & (2'd1 == out1_V_1_state)) | ((2'd3 == out1_V_1_state) & ~((1'b1 == out1_V_1_vld_in) & (1'b0 == out1_V_1_ack_out)) & ~((1'b0 == out1_V_1_vld_in) & (1'b1 == out1_V_1_ack_out))))) begin
            out1_V_1_state <= 2'd3;
        end else begin
            out1_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out2_V_1_ack_out) & (1'b1 == out2_V_1_vld_out))) begin
            out2_V_1_sel_rd <= ~out2_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out2_V_1_vld_in) & (1'b1 == out2_V_1_ack_in))) begin
            out2_V_1_sel_wr <= ~out2_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out2_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out2_V_1_vld_in) & (1'b1 == out2_V_1_ack_out) & (2'd3 == out2_V_1_state)) | ((1'b0 == out2_V_1_vld_in) & (2'd2 == out2_V_1_state)))) begin
            out2_V_1_state <= 2'd2;
        end else if ((((1'b1 == out2_V_1_vld_in) & (1'b0 == out2_V_1_ack_out) & (2'd3 == out2_V_1_state)) | ((1'b0 == out2_V_1_ack_out) & (2'd1 == out2_V_1_state)))) begin
            out2_V_1_state <= 2'd1;
        end else if ((((1'b1 == out2_V_1_vld_in) & (2'd2 == out2_V_1_state)) | ((1'b1 == out2_V_1_ack_out) & (2'd1 == out2_V_1_state)) | ((2'd3 == out2_V_1_state) & ~((1'b1 == out2_V_1_vld_in) & (1'b0 == out2_V_1_ack_out)) & ~((1'b0 == out2_V_1_vld_in) & (1'b1 == out2_V_1_ack_out))))) begin
            out2_V_1_state <= 2'd3;
        end else begin
            out2_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out3_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out3_V_1_ack_out) & (1'b1 == out3_V_1_vld_out))) begin
            out3_V_1_sel_rd <= ~out3_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out3_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out3_V_1_vld_in) & (1'b1 == out3_V_1_ack_in))) begin
            out3_V_1_sel_wr <= ~out3_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out3_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out3_V_1_vld_in) & (1'b1 == out3_V_1_ack_out) & (2'd3 == out3_V_1_state)) | ((1'b0 == out3_V_1_vld_in) & (2'd2 == out3_V_1_state)))) begin
            out3_V_1_state <= 2'd2;
        end else if ((((1'b1 == out3_V_1_vld_in) & (1'b0 == out3_V_1_ack_out) & (2'd3 == out3_V_1_state)) | ((1'b0 == out3_V_1_ack_out) & (2'd1 == out3_V_1_state)))) begin
            out3_V_1_state <= 2'd1;
        end else if ((((1'b1 == out3_V_1_vld_in) & (2'd2 == out3_V_1_state)) | ((1'b1 == out3_V_1_ack_out) & (2'd1 == out3_V_1_state)) | ((2'd3 == out3_V_1_state) & ~((1'b1 == out3_V_1_vld_in) & (1'b0 == out3_V_1_ack_out)) & ~((1'b0 == out3_V_1_vld_in) & (1'b1 == out3_V_1_ack_out))))) begin
            out3_V_1_state <= 2'd3;
        end else begin
            out3_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in0_V_0_load_A)) begin
        in0_V_0_payload_A <= in0_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in0_V_0_load_B)) begin
        in0_V_0_payload_B <= in0_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in1_V_0_load_A)) begin
        in1_V_0_payload_A <= in1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in1_V_0_load_B)) begin
        in1_V_0_payload_B <= in1_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in2_V_0_load_A)) begin
        in2_V_0_payload_A <= in2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in2_V_0_load_B)) begin
        in2_V_0_payload_B <= in2_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in3_V_0_load_A)) begin
        in3_V_0_payload_A <= in3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in3_V_0_load_B)) begin
        in3_V_0_payload_B <= in3_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out0_V_1_load_A)) begin
        out0_V_1_payload_A <= tmp_4_fu_413_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out0_V_1_load_B)) begin
        out0_V_1_payload_B <= tmp_4_fu_413_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out1_V_1_load_A)) begin
        out1_V_1_payload_A <= tmp_6_fu_427_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out1_V_1_load_B)) begin
        out1_V_1_payload_B <= tmp_6_fu_427_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out2_V_1_load_A)) begin
        out2_V_1_payload_A <= tmp_8_fu_441_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out2_V_1_load_B)) begin
        out2_V_1_payload_B <= tmp_8_fu_441_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out3_V_1_load_A)) begin
        out3_V_1_payload_A <= tmp_9_fu_455_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out3_V_1_load_B)) begin
        out3_V_1_payload_B <= tmp_9_fu_455_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_0_3_reg_505) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        tmp_0_s_reg_144 <= in0_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        tmp_1_reg_478 <= tmp_1_fu_193_p1;
        tmp_2_reg_487 <= tmp_2_fu_197_p1;
        tmp_3_reg_496 <= tmp_3_fu_201_p1;
        tmp_reg_469 <= tmp_fu_189_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        toTransfer_0_3_reg_505 <= toTransfer_0_3_fu_361_p6;
        toTransfer_1_3_reg_509 <= toTransfer_1_3_fu_374_p6;
        toTransfer_2_3_reg_513 <= toTransfer_2_3_fu_387_p6;
        toTransfer_3_3_reg_517 <= toTransfer_3_3_fu_400_p6;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_0_3_reg_505) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        in0_V_0_ack_out = 1'b1;
    end else begin
        in0_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in0_V_0_sel)) begin
        in0_V_0_data_out = in0_V_0_payload_B;
    end else begin
        in0_V_0_data_out = in0_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_0_3_reg_505))) begin
        in0_V_TDATA_blk_n = in0_V_0_state[1'd0];
    end else begin
        in0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_1_3_reg_509) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        in1_V_0_ack_out = 1'b1;
    end else begin
        in1_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in1_V_0_sel)) begin
        in1_V_0_data_out = in1_V_0_payload_B;
    end else begin
        in1_V_0_data_out = in1_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_1_3_reg_509))) begin
        in1_V_TDATA_blk_n = in1_V_0_state[1'd0];
    end else begin
        in1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_2_3_reg_513) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        in2_V_0_ack_out = 1'b1;
    end else begin
        in2_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in2_V_0_sel)) begin
        in2_V_0_data_out = in2_V_0_payload_B;
    end else begin
        in2_V_0_data_out = in2_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_2_3_reg_513))) begin
        in2_V_TDATA_blk_n = in2_V_0_state[1'd0];
    end else begin
        in2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_3_3_reg_517) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        in3_V_0_ack_out = 1'b1;
    end else begin
        in3_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in3_V_0_sel)) begin
        in3_V_0_data_out = in3_V_0_payload_B;
    end else begin
        in3_V_0_data_out = in3_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_3_3_reg_517))) begin
        in3_V_TDATA_blk_n = in3_V_0_state[1'd0];
    end else begin
        in3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out0_V_1_sel)) begin
        out0_V_1_data_out = out0_V_1_payload_B;
    end else begin
        out0_V_1_data_out = out0_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        out0_V_1_vld_in = 1'b1;
    end else begin
        out0_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out0_V_TDATA_blk_n = out0_V_1_state[1'd1];
    end else begin
        out0_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out1_V_1_sel)) begin
        out1_V_1_data_out = out1_V_1_payload_B;
    end else begin
        out1_V_1_data_out = out1_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        out1_V_1_vld_in = 1'b1;
    end else begin
        out1_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out1_V_TDATA_blk_n = out1_V_1_state[1'd1];
    end else begin
        out1_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out2_V_1_sel)) begin
        out2_V_1_data_out = out2_V_1_payload_B;
    end else begin
        out2_V_1_data_out = out2_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        out2_V_1_vld_in = 1'b1;
    end else begin
        out2_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out2_V_TDATA_blk_n = out2_V_1_state[1'd1];
    end else begin
        out2_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == out3_V_1_sel)) begin
        out3_V_1_data_out = out3_V_1_payload_B;
    end else begin
        out3_V_1_data_out = out3_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
        out3_V_1_vld_in = 1'b1;
    end else begin
        out3_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        out3_V_TDATA_blk_n = out3_V_1_state[1'd1];
    end else begin
        out3_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == toTransfer_0_3_reg_505))) begin
        tmp_0_s_phi_fu_148_p4 = in0_V_0_data_out;
    end else begin
        tmp_0_s_phi_fu_148_p4 = tmp_0_s_reg_144;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & ~(((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)) | (1'b1 == ap_block_state4_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & ~((1'b0 == out0_V_1_ack_in) | (1'b0 == out1_V_1_ack_in) | (1'b0 == out2_V_1_ack_in) | (1'b0 == out3_V_1_ack_in) | (1'b1 == ap_block_state5_io)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4 = (((1'd1 == toTransfer_0_3_reg_505) & (1'b0 == in0_V_0_vld_out)) | ((1'd1 == toTransfer_1_3_reg_509) & (1'b0 == in1_V_0_vld_out)) | ((1'd1 == toTransfer_2_3_reg_513) & (1'b0 == in2_V_0_vld_out)) | ((1'd1 == toTransfer_3_3_reg_517) & (1'b0 == in3_V_0_vld_out)));
end

always @ (*) begin
    ap_block_state4_io = ((1'b0 == out0_V_1_ack_in) | (1'b0 == out1_V_1_ack_in) | (1'b0 == out2_V_1_ack_in) | (1'b0 == out3_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5 = ((1'b0 == out0_V_1_ack_in) | (1'b0 == out1_V_1_ack_in) | (1'b0 == out2_V_1_ack_in) | (1'b0 == out3_V_1_ack_in));
end

always @ (*) begin
    ap_block_state5_io = ((1'b0 == out0_V_1_ack_in) | (1'b0 == out1_V_1_ack_in) | (1'b0 == out2_V_1_ack_in) | (1'b0 == out3_V_1_ack_in));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in0_V_0_ack_in = in0_V_0_state[1'd1];

assign in0_V_0_load_A = (in0_V_0_state_cmp_full & ~in0_V_0_sel_wr);

assign in0_V_0_load_B = (in0_V_0_sel_wr & in0_V_0_state_cmp_full);

assign in0_V_0_sel = in0_V_0_sel_rd;

assign in0_V_0_state_cmp_full = ((in0_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in0_V_0_vld_in = in0_V_TVALID;

assign in0_V_0_vld_out = in0_V_0_state[1'd0];

assign in0_V_TREADY = in0_V_0_state[1'd1];

assign in1_V_0_ack_in = in1_V_0_state[1'd1];

assign in1_V_0_load_A = (in1_V_0_state_cmp_full & ~in1_V_0_sel_wr);

assign in1_V_0_load_B = (in1_V_0_sel_wr & in1_V_0_state_cmp_full);

assign in1_V_0_sel = in1_V_0_sel_rd;

assign in1_V_0_state_cmp_full = ((in1_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in1_V_0_vld_in = in1_V_TVALID;

assign in1_V_0_vld_out = in1_V_0_state[1'd0];

assign in1_V_TREADY = in1_V_0_state[1'd1];

assign in2_V_0_ack_in = in2_V_0_state[1'd1];

assign in2_V_0_load_A = (in2_V_0_state_cmp_full & ~in2_V_0_sel_wr);

assign in2_V_0_load_B = (in2_V_0_sel_wr & in2_V_0_state_cmp_full);

assign in2_V_0_sel = in2_V_0_sel_rd;

assign in2_V_0_state_cmp_full = ((in2_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in2_V_0_vld_in = in2_V_TVALID;

assign in2_V_0_vld_out = in2_V_0_state[1'd0];

assign in2_V_TREADY = in2_V_0_state[1'd1];

assign in3_V_0_ack_in = in3_V_0_state[1'd1];

assign in3_V_0_load_A = (in3_V_0_state_cmp_full & ~in3_V_0_sel_wr);

assign in3_V_0_load_B = (in3_V_0_sel_wr & in3_V_0_state_cmp_full);

assign in3_V_0_sel = in3_V_0_sel_rd;

assign in3_V_0_state_cmp_full = ((in3_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in3_V_0_vld_in = in3_V_TVALID;

assign in3_V_0_vld_out = in3_V_0_state[1'd0];

assign in3_V_TREADY = in3_V_0_state[1'd1];

assign out0_V_1_ack_in = out0_V_1_state[1'd1];

assign out0_V_1_ack_out = out0_V_TREADY;

assign out0_V_1_load_A = (out0_V_1_state_cmp_full & ~out0_V_1_sel_wr);

assign out0_V_1_load_B = (out0_V_1_sel_wr & out0_V_1_state_cmp_full);

assign out0_V_1_sel = out0_V_1_sel_rd;

assign out0_V_1_state_cmp_full = ((out0_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out0_V_1_vld_out = out0_V_1_state[1'd0];

assign out0_V_TDATA = out0_V_1_data_out;

assign out0_V_TVALID = out0_V_1_state[1'd0];

assign out1_V_1_ack_in = out1_V_1_state[1'd1];

assign out1_V_1_ack_out = out1_V_TREADY;

assign out1_V_1_load_A = (out1_V_1_state_cmp_full & ~out1_V_1_sel_wr);

assign out1_V_1_load_B = (out1_V_1_sel_wr & out1_V_1_state_cmp_full);

assign out1_V_1_sel = out1_V_1_sel_rd;

assign out1_V_1_state_cmp_full = ((out1_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out1_V_1_vld_out = out1_V_1_state[1'd0];

assign out1_V_TDATA = out1_V_1_data_out;

assign out1_V_TVALID = out1_V_1_state[1'd0];

assign out2_V_1_ack_in = out2_V_1_state[1'd1];

assign out2_V_1_ack_out = out2_V_TREADY;

assign out2_V_1_load_A = (out2_V_1_state_cmp_full & ~out2_V_1_sel_wr);

assign out2_V_1_load_B = (out2_V_1_sel_wr & out2_V_1_state_cmp_full);

assign out2_V_1_sel = out2_V_1_sel_rd;

assign out2_V_1_state_cmp_full = ((out2_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out2_V_1_vld_out = out2_V_1_state[1'd0];

assign out2_V_TDATA = out2_V_1_data_out;

assign out2_V_TVALID = out2_V_1_state[1'd0];

assign out3_V_1_ack_in = out3_V_1_state[1'd1];

assign out3_V_1_ack_out = out3_V_TREADY;

assign out3_V_1_load_A = (out3_V_1_state_cmp_full & ~out3_V_1_sel_wr);

assign out3_V_1_load_B = (out3_V_1_sel_wr & out3_V_1_state_cmp_full);

assign out3_V_1_sel = out3_V_1_sel_rd;

assign out3_V_1_state_cmp_full = ((out3_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out3_V_1_vld_out = out3_V_1_state[1'd0];

assign out3_V_TDATA = out3_V_1_data_out;

assign out3_V_TVALID = out3_V_1_state[1'd0];

assign tmp_1_fu_193_p1 = src1[1:0];

assign tmp_2_fu_197_p1 = src2[1:0];

assign tmp_3_fu_201_p1 = src3[1:0];

assign tmp_fu_189_p1 = src0[1:0];

endmodule //xbarfloat
