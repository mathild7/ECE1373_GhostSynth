// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Echo,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.506000,HLS_SYN_LAT=30,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=5,HLS_SYN_FF=1555,HLS_SYN_LUT=1680}" *)

module Echo (
        ap_clk,
        ap_rst_n,
        value_in_V_TDATA,
        value_in_V_TVALID,
        value_in_V_TREADY,
        value_out_V_TDATA,
        value_out_V_TVALID,
        value_out_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_state3 = 48'd4;
parameter    ap_ST_fsm_state4 = 48'd8;
parameter    ap_ST_fsm_state5 = 48'd16;
parameter    ap_ST_fsm_state6 = 48'd32;
parameter    ap_ST_fsm_state7 = 48'd64;
parameter    ap_ST_fsm_state8 = 48'd128;
parameter    ap_ST_fsm_state9 = 48'd256;
parameter    ap_ST_fsm_state10 = 48'd512;
parameter    ap_ST_fsm_state11 = 48'd1024;
parameter    ap_ST_fsm_state12 = 48'd2048;
parameter    ap_ST_fsm_state13 = 48'd4096;
parameter    ap_ST_fsm_state14 = 48'd8192;
parameter    ap_ST_fsm_state15 = 48'd16384;
parameter    ap_ST_fsm_state16 = 48'd32768;
parameter    ap_ST_fsm_state17 = 48'd65536;
parameter    ap_ST_fsm_state18 = 48'd131072;
parameter    ap_ST_fsm_state19 = 48'd262144;
parameter    ap_ST_fsm_state20 = 48'd524288;
parameter    ap_ST_fsm_state21 = 48'd1048576;
parameter    ap_ST_fsm_state22 = 48'd2097152;
parameter    ap_ST_fsm_state23 = 48'd4194304;
parameter    ap_ST_fsm_state24 = 48'd8388608;
parameter    ap_ST_fsm_state25 = 48'd16777216;
parameter    ap_ST_fsm_state26 = 48'd33554432;
parameter    ap_ST_fsm_state27 = 48'd67108864;
parameter    ap_ST_fsm_state28 = 48'd134217728;
parameter    ap_ST_fsm_state29 = 48'd268435456;
parameter    ap_ST_fsm_state30 = 48'd536870912;
parameter    ap_ST_fsm_state31 = 48'd1073741824;
parameter    ap_ST_fsm_state32 = 48'd2147483648;
parameter    ap_ST_fsm_state33 = 48'd4294967296;
parameter    ap_ST_fsm_state34 = 48'd8589934592;
parameter    ap_ST_fsm_state35 = 48'd17179869184;
parameter    ap_ST_fsm_state36 = 48'd34359738368;
parameter    ap_ST_fsm_state37 = 48'd68719476736;
parameter    ap_ST_fsm_state38 = 48'd137438953472;
parameter    ap_ST_fsm_state39 = 48'd274877906944;
parameter    ap_ST_fsm_state40 = 48'd549755813888;
parameter    ap_ST_fsm_state41 = 48'd1099511627776;
parameter    ap_ST_fsm_state42 = 48'd2199023255552;
parameter    ap_ST_fsm_state43 = 48'd4398046511104;
parameter    ap_ST_fsm_state44 = 48'd8796093022208;
parameter    ap_ST_fsm_state45 = 48'd17592186044416;
parameter    ap_ST_fsm_state46 = 48'd35184372088832;
parameter    ap_ST_fsm_state47 = 48'd70368744177664;
parameter    ap_ST_fsm_state48 = 48'd140737488355328;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] value_in_V_TDATA;
input   value_in_V_TVALID;
output   value_in_V_TREADY;
output  [31:0] value_out_V_TDATA;
output   value_out_V_TVALID;
input   value_out_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] value_in_V_0_data_out;
wire    value_in_V_0_vld_in;
wire    value_in_V_0_vld_out;
wire    value_in_V_0_ack_in;
reg    value_in_V_0_ack_out;
reg   [31:0] value_in_V_0_payload_A;
reg   [31:0] value_in_V_0_payload_B;
reg    value_in_V_0_sel_rd;
reg    value_in_V_0_sel_wr;
wire    value_in_V_0_sel;
wire    value_in_V_0_load_A;
wire    value_in_V_0_load_B;
reg   [1:0] value_in_V_0_state;
wire    value_in_V_0_state_cmp_full;
reg   [31:0] value_out_V_1_data_out;
reg    value_out_V_1_vld_in;
wire    value_out_V_1_vld_out;
wire    value_out_V_1_ack_in;
wire    value_out_V_1_ack_out;
reg   [31:0] value_out_V_1_payload_A;
reg   [31:0] value_out_V_1_payload_B;
reg    value_out_V_1_sel_rd;
reg    value_out_V_1_sel_wr;
wire    value_out_V_1_sel;
wire    value_out_V_1_load_A;
wire    value_out_V_1_load_B;
reg   [1:0] value_out_V_1_state;
wire    value_out_V_1_state_cmp_full;
wire   [31:0] delay;
wire   [31:0] scale;
reg   [31:0] delaycheck;
reg   [31:0] readBuffer;
reg   [31:0] writeBuffer;
reg   [12:0] buffer_r_address0;
reg    buffer_r_ce0;
reg    buffer_r_we0;
wire   [31:0] buffer_r_q0;
reg    value_in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state43;
reg    value_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
reg   [31:0] scale_read_reg_223;
wire    ap_CS_fsm_state1;
reg   [31:0] delay_read_reg_228;
wire   [0:0] tmp_1_fu_129_p2;
reg   [0:0] tmp_1_reg_234;
reg   [31:0] readBuffer_load_reg_238;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_fu_153_p2;
wire    ap_CS_fsm_state37;
reg   [31:0] buffer_load_reg_266;
wire    ap_CS_fsm_state38;
wire   [31:0] grp_fu_121_p2;
reg   [31:0] tmp_7_reg_271;
wire    ap_CS_fsm_state42;
wire   [31:0] grp_fu_115_p2;
reg   [31:0] current_value_reg_281;
reg   [31:0] writeBuffer_loc_reg_105;
wire  signed [63:0] tmp_6_fu_164_p1;
wire  signed [63:0] tmp_8_fu_192_p1;
wire   [31:0] storemerge_fu_178_p3;
wire   [31:0] storemerge5_fu_209_p3;
wire    ap_CS_fsm_state39;
wire   [31:0] tmp1_fu_143_p2;
wire   [31:0] grp_fu_153_p0;
wire   [13:0] grp_fu_153_p1;
wire   [0:0] tmp_s_fu_168_p2;
wire   [31:0] tmp_9_fu_173_p2;
wire   [0:0] tmp_2_fu_197_p2;
wire   [31:0] tmp_5_fu_203_p2;
reg    grp_fu_115_ce;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
reg    grp_fu_153_ap_start;
wire    grp_fu_153_ap_done;
reg   [47:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 value_in_V_0_sel_rd = 1'b0;
#0 value_in_V_0_sel_wr = 1'b0;
#0 value_in_V_0_state = 2'd0;
#0 value_out_V_1_sel_rd = 1'b0;
#0 value_out_V_1_sel_wr = 1'b0;
#0 value_out_V_1_state = 2'd0;
#0 delaycheck = 32'd0;
#0 readBuffer = 32'd0;
#0 writeBuffer = 32'd10;
#0 ap_CS_fsm = 48'd1;
end

Echo_buffer_r #(
    .DataWidth( 32 ),
    .AddressRange( 4800 ),
    .AddressWidth( 13 ))
buffer_r_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buffer_r_address0),
    .ce0(buffer_r_ce0),
    .we0(buffer_r_we0),
    .d0(current_value_reg_281),
    .q0(buffer_r_q0)
);

Echo_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
Echo_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .delay(delay),
    .scale(scale)
);

Echo_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Echo_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(value_in_V_0_data_out),
    .din1(tmp_7_reg_271),
    .ce(grp_fu_115_ce),
    .dout(grp_fu_115_p2)
);

Echo_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
Echo_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(buffer_load_reg_266),
    .din1(scale_read_reg_223),
    .ce(1'b1),
    .dout(grp_fu_121_p2)
);

Echo_srem_32ns_14dEe #(
    .ID( 1 ),
    .NUM_STAGE( 36 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 14 ),
    .dout_WIDTH( 32 ))
Echo_srem_32ns_14dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_153_ap_start),
    .done(grp_fu_153_ap_done),
    .din0(grp_fu_153_p0),
    .din1(grp_fu_153_p1),
    .ce(1'b1),
    .dout(grp_fu_153_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        value_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == value_in_V_0_ack_out) & (1'b1 == value_in_V_0_vld_out))) begin
            value_in_V_0_sel_rd <= ~value_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        value_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == value_in_V_0_vld_in) & (1'b1 == value_in_V_0_ack_in))) begin
            value_in_V_0_sel_wr <= ~value_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        value_in_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == value_in_V_0_vld_in) & (1'b1 == value_in_V_0_ack_out) & (value_in_V_0_state == 2'd3)) | ((1'b0 == value_in_V_0_vld_in) & (value_in_V_0_state == 2'd2)))) begin
            value_in_V_0_state <= 2'd2;
        end else if ((((1'b1 == value_in_V_0_vld_in) & (1'b0 == value_in_V_0_ack_out) & (value_in_V_0_state == 2'd3)) | ((1'b0 == value_in_V_0_ack_out) & (value_in_V_0_state == 2'd1)))) begin
            value_in_V_0_state <= 2'd1;
        end else if ((((1'b1 == value_in_V_0_vld_in) & (value_in_V_0_state == 2'd2)) | ((1'b1 == value_in_V_0_ack_out) & (value_in_V_0_state == 2'd1)) | ((value_in_V_0_state == 2'd3) & ~((1'b1 == value_in_V_0_vld_in) & (1'b0 == value_in_V_0_ack_out)) & ~((1'b0 == value_in_V_0_vld_in) & (1'b1 == value_in_V_0_ack_out))))) begin
            value_in_V_0_state <= 2'd3;
        end else begin
            value_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        value_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == value_out_V_1_ack_out) & (1'b1 == value_out_V_1_vld_out))) begin
            value_out_V_1_sel_rd <= ~value_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        value_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == value_out_V_1_vld_in) & (1'b1 == value_out_V_1_ack_in))) begin
            value_out_V_1_sel_wr <= ~value_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        value_out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == value_out_V_1_vld_in) & (1'b1 == value_out_V_1_ack_out) & (2'd3 == value_out_V_1_state)) | ((1'b0 == value_out_V_1_vld_in) & (2'd2 == value_out_V_1_state)))) begin
            value_out_V_1_state <= 2'd2;
        end else if ((((1'b1 == value_out_V_1_vld_in) & (1'b0 == value_out_V_1_ack_out) & (2'd3 == value_out_V_1_state)) | ((1'b0 == value_out_V_1_ack_out) & (2'd1 == value_out_V_1_state)))) begin
            value_out_V_1_state <= 2'd1;
        end else if ((((1'b1 == value_out_V_1_vld_in) & (2'd2 == value_out_V_1_state)) | ((1'b1 == value_out_V_1_ack_out) & (2'd1 == value_out_V_1_state)) | ((2'd3 == value_out_V_1_state) & ~((1'b1 == value_out_V_1_vld_in) & (1'b0 == value_out_V_1_ack_out)) & ~((1'b0 == value_out_V_1_vld_in) & (1'b1 == value_out_V_1_ack_out))))) begin
            value_out_V_1_state <= 2'd3;
        end else begin
            value_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (1'd0 == tmp_1_reg_234))) begin
        writeBuffer_loc_reg_105 <= grp_fu_153_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (1'd1 == tmp_1_fu_129_p2))) begin
        writeBuffer_loc_reg_105 <= writeBuffer;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        buffer_load_reg_266 <= buffer_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (value_out_V_1_ack_in == 1'b1))) begin
        current_value_reg_281 <= grp_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        delay_read_reg_228 <= delay;
        readBuffer_load_reg_238 <= readBuffer;
        scale_read_reg_223 <= scale;
        tmp_1_reg_234 <= tmp_1_fu_129_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        delaycheck <= delay_read_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        readBuffer <= storemerge_fu_178_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        tmp_7_reg_271 <= grp_fu_121_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == value_in_V_0_load_A)) begin
        value_in_V_0_payload_A <= value_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == value_in_V_0_load_B)) begin
        value_in_V_0_payload_B <= value_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == value_out_V_1_load_A)) begin
        value_out_V_1_payload_A <= grp_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == value_out_V_1_load_B)) begin
        value_out_V_1_payload_B <= grp_fu_115_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (value_out_V_1_ack_in == 1'b1))) begin
        writeBuffer <= storemerge5_fu_209_p3;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        buffer_r_address0 = tmp_8_fu_192_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        buffer_r_address0 = tmp_6_fu_164_p1;
    end else begin
        buffer_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((1'b1 == ap_CS_fsm_state48) & (value_out_V_1_ack_in == 1'b1)))) begin
        buffer_r_ce0 = 1'b1;
    end else begin
        buffer_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state48) & (value_out_V_1_ack_in == 1'b1))) begin
        buffer_r_we0 = 1'b1;
    end else begin
        buffer_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state43) & (value_in_V_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state47) & (value_out_V_1_ack_in == 1'b1)) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46))) begin
        grp_fu_115_ce = 1'b1;
    end else begin
        grp_fu_115_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_153_ap_start = 1'b1;
    end else begin
        grp_fu_153_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (value_in_V_0_vld_out == 1'b1))) begin
        value_in_V_0_ack_out = 1'b1;
    end else begin
        value_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == value_in_V_0_sel)) begin
        value_in_V_0_data_out = value_in_V_0_payload_B;
    end else begin
        value_in_V_0_data_out = value_in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        value_in_V_TDATA_blk_n = value_in_V_0_state[1'd0];
    end else begin
        value_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == value_out_V_1_sel)) begin
        value_out_V_1_data_out = value_out_V_1_payload_B;
    end else begin
        value_out_V_1_data_out = value_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) & (value_out_V_1_ack_in == 1'b1))) begin
        value_out_V_1_vld_in = 1'b1;
    end else begin
        value_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48))) begin
        value_out_V_TDATA_blk_n = value_out_V_1_state[1'd1];
    end else begin
        value_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'd1 == tmp_1_fu_129_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (value_in_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            if (((1'b1 == ap_CS_fsm_state47) & (value_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state48 : begin
            if (((1'b1 == ap_CS_fsm_state48) & (value_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_153_p0 = (tmp1_fu_143_p2 + readBuffer_load_reg_238);

assign grp_fu_153_p1 = 32'd4800;

assign storemerge5_fu_209_p3 = ((tmp_2_fu_197_p2[0:0] === 1'b1) ? tmp_5_fu_203_p2 : 32'd0);

assign storemerge_fu_178_p3 = ((tmp_s_fu_168_p2[0:0] === 1'b1) ? tmp_9_fu_173_p2 : 32'd0);

assign tmp1_fu_143_p2 = (delay_read_reg_228 + 32'd4800);

assign tmp_1_fu_129_p2 = ((delaycheck == delay) ? 1'b1 : 1'b0);

assign tmp_2_fu_197_p2 = (($signed(writeBuffer_loc_reg_105) < $signed(32'd4799)) ? 1'b1 : 1'b0);

assign tmp_5_fu_203_p2 = (writeBuffer_loc_reg_105 + 32'd1);

assign tmp_6_fu_164_p1 = $signed(readBuffer_load_reg_238);

assign tmp_8_fu_192_p1 = $signed(writeBuffer_loc_reg_105);

assign tmp_9_fu_173_p2 = (readBuffer_load_reg_238 + 32'd1);

assign tmp_s_fu_168_p2 = (($signed(readBuffer_load_reg_238) < $signed(32'd4799)) ? 1'b1 : 1'b0);

assign value_in_V_0_ack_in = value_in_V_0_state[1'd1];

assign value_in_V_0_load_A = (value_in_V_0_state_cmp_full & ~value_in_V_0_sel_wr);

assign value_in_V_0_load_B = (value_in_V_0_sel_wr & value_in_V_0_state_cmp_full);

assign value_in_V_0_sel = value_in_V_0_sel_rd;

assign value_in_V_0_state_cmp_full = ((value_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign value_in_V_0_vld_in = value_in_V_TVALID;

assign value_in_V_0_vld_out = value_in_V_0_state[1'd0];

assign value_in_V_TREADY = value_in_V_0_state[1'd1];

assign value_out_V_1_ack_in = value_out_V_1_state[1'd1];

assign value_out_V_1_ack_out = value_out_V_TREADY;

assign value_out_V_1_load_A = (value_out_V_1_state_cmp_full & ~value_out_V_1_sel_wr);

assign value_out_V_1_load_B = (value_out_V_1_sel_wr & value_out_V_1_state_cmp_full);

assign value_out_V_1_sel = value_out_V_1_sel_rd;

assign value_out_V_1_state_cmp_full = ((value_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign value_out_V_1_vld_out = value_out_V_1_state[1'd0];

assign value_out_V_TDATA = value_out_V_1_data_out;

assign value_out_V_TVALID = value_out_V_1_state[1'd0];

endmodule //Echo
