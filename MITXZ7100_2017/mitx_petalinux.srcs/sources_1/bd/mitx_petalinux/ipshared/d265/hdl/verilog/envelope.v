// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="envelope,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=57,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=4727,HLS_SYN_LUT=5833}" *)

module envelope (
        ap_clk,
        ap_rst_n,
        wave_in_V_TDATA,
        wave_in_V_TVALID,
        wave_in_V_TREADY,
        wave_out_V_TDATA,
        wave_out_V_TVALID,
        wave_out_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 68'd1;
parameter    ap_ST_fsm_state2 = 68'd2;
parameter    ap_ST_fsm_state3 = 68'd4;
parameter    ap_ST_fsm_state4 = 68'd8;
parameter    ap_ST_fsm_state5 = 68'd16;
parameter    ap_ST_fsm_state6 = 68'd32;
parameter    ap_ST_fsm_state7 = 68'd64;
parameter    ap_ST_fsm_state8 = 68'd128;
parameter    ap_ST_fsm_state9 = 68'd256;
parameter    ap_ST_fsm_state10 = 68'd512;
parameter    ap_ST_fsm_state11 = 68'd1024;
parameter    ap_ST_fsm_state12 = 68'd2048;
parameter    ap_ST_fsm_state13 = 68'd4096;
parameter    ap_ST_fsm_state14 = 68'd8192;
parameter    ap_ST_fsm_state15 = 68'd16384;
parameter    ap_ST_fsm_state16 = 68'd32768;
parameter    ap_ST_fsm_state17 = 68'd65536;
parameter    ap_ST_fsm_state18 = 68'd131072;
parameter    ap_ST_fsm_state19 = 68'd262144;
parameter    ap_ST_fsm_state20 = 68'd524288;
parameter    ap_ST_fsm_state21 = 68'd1048576;
parameter    ap_ST_fsm_state22 = 68'd2097152;
parameter    ap_ST_fsm_state23 = 68'd4194304;
parameter    ap_ST_fsm_state24 = 68'd8388608;
parameter    ap_ST_fsm_state25 = 68'd16777216;
parameter    ap_ST_fsm_state26 = 68'd33554432;
parameter    ap_ST_fsm_state27 = 68'd67108864;
parameter    ap_ST_fsm_state28 = 68'd134217728;
parameter    ap_ST_fsm_state29 = 68'd268435456;
parameter    ap_ST_fsm_state30 = 68'd536870912;
parameter    ap_ST_fsm_state31 = 68'd1073741824;
parameter    ap_ST_fsm_state32 = 68'd2147483648;
parameter    ap_ST_fsm_state33 = 68'd4294967296;
parameter    ap_ST_fsm_state34 = 68'd8589934592;
parameter    ap_ST_fsm_state35 = 68'd17179869184;
parameter    ap_ST_fsm_state36 = 68'd34359738368;
parameter    ap_ST_fsm_state37 = 68'd68719476736;
parameter    ap_ST_fsm_state38 = 68'd137438953472;
parameter    ap_ST_fsm_state39 = 68'd274877906944;
parameter    ap_ST_fsm_state40 = 68'd549755813888;
parameter    ap_ST_fsm_state41 = 68'd1099511627776;
parameter    ap_ST_fsm_state42 = 68'd2199023255552;
parameter    ap_ST_fsm_state43 = 68'd4398046511104;
parameter    ap_ST_fsm_state44 = 68'd8796093022208;
parameter    ap_ST_fsm_state45 = 68'd17592186044416;
parameter    ap_ST_fsm_state46 = 68'd35184372088832;
parameter    ap_ST_fsm_state47 = 68'd70368744177664;
parameter    ap_ST_fsm_state48 = 68'd140737488355328;
parameter    ap_ST_fsm_state49 = 68'd281474976710656;
parameter    ap_ST_fsm_state50 = 68'd562949953421312;
parameter    ap_ST_fsm_state51 = 68'd1125899906842624;
parameter    ap_ST_fsm_state52 = 68'd2251799813685248;
parameter    ap_ST_fsm_state53 = 68'd4503599627370496;
parameter    ap_ST_fsm_state54 = 68'd9007199254740992;
parameter    ap_ST_fsm_state55 = 68'd18014398509481984;
parameter    ap_ST_fsm_state56 = 68'd36028797018963968;
parameter    ap_ST_fsm_state57 = 68'd72057594037927936;
parameter    ap_ST_fsm_state58 = 68'd144115188075855872;
parameter    ap_ST_fsm_state59 = 68'd288230376151711744;
parameter    ap_ST_fsm_state60 = 68'd576460752303423488;
parameter    ap_ST_fsm_state61 = 68'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 68'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 68'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 68'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 68'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 68'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 68'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 68'd147573952589676412928;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] wave_in_V_TDATA;
input   wave_in_V_TVALID;
output   wave_in_V_TREADY;
output  [31:0] wave_out_V_TDATA;
output   wave_out_V_TVALID;
input   wave_out_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] wave_in_V_0_data_out;
wire    wave_in_V_0_vld_in;
wire    wave_in_V_0_vld_out;
wire    wave_in_V_0_ack_in;
reg    wave_in_V_0_ack_out;
reg   [31:0] wave_in_V_0_payload_A;
reg   [31:0] wave_in_V_0_payload_B;
reg    wave_in_V_0_sel_rd;
reg    wave_in_V_0_sel_wr;
wire    wave_in_V_0_sel;
wire    wave_in_V_0_load_A;
wire    wave_in_V_0_load_B;
reg   [1:0] wave_in_V_0_state;
wire    wave_in_V_0_state_cmp_full;
reg   [31:0] wave_out_V_1_data_out;
reg    wave_out_V_1_vld_in;
wire    wave_out_V_1_vld_out;
wire    wave_out_V_1_ack_in;
wire    wave_out_V_1_ack_out;
reg   [31:0] wave_out_V_1_payload_A;
reg   [31:0] wave_out_V_1_payload_B;
reg    wave_out_V_1_sel_rd;
reg    wave_out_V_1_sel_wr;
wire    wave_out_V_1_sel;
wire    wave_out_V_1_load_A;
wire    wave_out_V_1_load_B;
reg   [1:0] wave_out_V_1_state;
wire    wave_out_V_1_state_cmp_full;
wire   [31:0] press;
wire   [31:0] attackDuration;
wire   [31:0] decayDuration;
wire   [31:0] sustainAmplitude;
wire   [31:0] releaseDuration;
reg   [31:0] lastpress;
reg   [31:0] releaseTime;
reg   [31:0] sustainTime;
reg   [31:0] releaseSlope;
reg   [0:0] wait_r;
reg   [31:0] time_r;
reg    wave_in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [67:0] ap_CS_fsm;
wire    ap_CS_fsm_state46;
reg    wave_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire   [31:0] grp_fu_173_p1;
reg   [31:0] reg_189;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state53;
reg   [0:0] tmp_16_reg_748;
reg   [0:0] sel_tmp2_reg_778;
reg   [0:0] sel_tmp3_reg_789;
reg   [0:0] sel_tmp5_reg_795;
wire   [31:0] grp_fu_154_p2;
reg   [31:0] reg_195;
wire    ap_CS_fsm_state62;
wire   [31:0] grp_fu_160_p2;
reg   [31:0] reg_201;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state66;
reg   [31:0] releaseDuration_read_reg_612;
wire    ap_CS_fsm_state1;
reg   [31:0] sustainAmplitude_rea_reg_621;
reg   [31:0] decayDuration_read_reg_629;
reg   [31:0] attackDuration_read_reg_636;
reg   [31:0] press_read_reg_643;
wire   [31:0] tmp_3_fu_207_p2;
reg   [31:0] tmp_3_reg_649;
wire   [31:0] grp_fu_176_p1;
reg   [31:0] tmp_4_reg_654;
wire   [0:0] tmp_32_fu_179_p2;
reg   [0:0] tmp_32_reg_659;
wire    ap_CS_fsm_state22;
wire   [31:0] grp_fu_164_p2;
reg   [31:0] attackSlope_reg_664;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_169_p2;
reg   [31:0] decaySlope_reg_669;
wire   [31:0] sustainAmplitude_ass_fu_253_p3;
reg   [31:0] sustainAmplitude_ass_reg_674;
wire   [0:0] tmp_7_fu_270_p2;
reg   [0:0] tmp_7_reg_681;
wire   [0:0] or_cond_4_fu_275_p2;
reg   [0:0] or_cond_4_reg_689;
wire   [31:0] tmp_s_fu_289_p2;
reg   [31:0] tmp_s_reg_703;
wire   [31:0] tmp_9_fu_302_p1;
wire    ap_CS_fsm_state30;
wire   [31:0] grp_fu_184_p2;
wire    ap_CS_fsm_state45;
wire   [0:0] not_tmp_7_fu_318_p2;
reg   [0:0] not_tmp_7_reg_718;
reg   [31:0] tmp_36_reg_725;
wire   [31:0] sustainTime_new_1_tm_fu_399_p3;
reg   [31:0] sustainTime_new_1_tm_reg_733;
wire   [31:0] time_load_s_fu_407_p3;
reg   [31:0] time_load_s_reg_739;
wire   [0:0] tmp_16_fu_415_p2;
wire   [0:0] tmp_19_fu_432_p2;
reg   [0:0] tmp_19_reg_756;
wire   [0:0] tmp_25_fu_437_p2;
reg   [0:0] tmp_25_reg_762;
wire   [31:0] tmp_20_fu_443_p2;
reg   [31:0] tmp_20_reg_768;
wire    ap_CS_fsm_state47;
wire   [31:0] tmp_26_fu_451_p2;
reg   [31:0] tmp_26_reg_773;
wire   [0:0] sel_tmp2_fu_460_p2;
wire   [0:0] sel_tmp8_fu_510_p2;
reg   [0:0] sel_tmp8_reg_784;
wire   [0:0] sel_tmp3_fu_522_p2;
wire   [0:0] sel_tmp5_fu_534_p2;
wire   [0:0] wait_flag_1_fu_539_p2;
reg   [0:0] wait_flag_1_reg_801;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state54;
wire   [0:0] not_or_cond_fu_573_p2;
reg   [0:0] not_or_cond_reg_810;
wire   [31:0] resultAmplitude_7_fu_593_p3;
reg   [31:0] resultAmplitude_7_reg_815;
wire   [31:0] resultAmplitude_fu_600_p3;
reg   [0:0] releaseTime_flag_reg_123;
reg   [31:0] releaseTime_loc_reg_136;
reg   [31:0] sustainTime_loc_reg_145;
wire   [31:0] releaseTime_new_1_re_fu_385_p3;
wire   [0:0] releaseTime_flag_1_s_fu_379_p2;
wire   [31:0] tmp_31_fu_543_p2;
reg   [31:0] grp_fu_154_p0;
reg   [31:0] grp_fu_154_p1;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state58;
reg   [31:0] grp_fu_160_p0;
reg   [31:0] grp_fu_160_p1;
wire    ap_CS_fsm_state63;
reg   [31:0] grp_fu_164_p0;
wire    ap_CS_fsm_state8;
reg   [31:0] grp_fu_173_p0;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state24;
wire   [31:0] sustainAmplitude_to_s_fu_213_p1;
wire   [7:0] tmp_5_fu_216_p4;
wire   [22:0] tmp_fu_226_p1;
wire   [0:0] notrhs_fu_236_p2;
wire   [0:0] notlhs_fu_230_p2;
wire   [0:0] tmp_30_fu_242_p2;
wire   [0:0] tmp_33_fu_248_p2;
wire   [0:0] tmp_6_fu_264_p2;
wire   [31:0] tmp_9_to_int_fu_293_p1;
wire   [31:0] tmp_9_neg_fu_296_p2;
wire   [31:0] tmp_13_fu_333_p2;
wire   [31:0] tmp_12_fu_327_p2;
wire   [0:0] tmp_34_fu_359_p2;
wire   [0:0] tmp1_fu_374_p2;
wire   [0:0] tmp_14_fu_365_p2;
wire   [31:0] releaseTime_new_1_fu_339_p3;
wire   [31:0] releaseTime_loc_1_fu_345_p3;
wire   [31:0] sustainTime_new_1_fu_352_p3;
wire   [31:0] releaseTime_loc_1_re_fu_392_p3;
wire   [0:0] not_tmp_s_fu_455_p2;
wire   [0:0] tmp_24_fu_447_p2;
wire   [0:0] sel_tmp6_demorgan_fu_471_p2;
wire   [0:0] tmp_24_not_fu_475_p2;
wire   [0:0] sel_tmp13_demorgan_fu_487_p2;
wire   [0:0] tmp_25_not_fu_493_p2;
wire   [0:0] not_sel_tmp7_fu_481_p2;
wire   [0:0] not_sel_tmp_fu_498_p2;
wire   [0:0] tmp2_fu_504_p2;
wire   [0:0] sel_tmp_fu_465_p2;
wire   [0:0] sel_tmp1_fu_516_p2;
wire   [0:0] sel_tmp4_fu_528_p2;
wire   [0:0] or_cond_fu_559_p2;
wire   [0:0] or_cond1_fu_563_p2;
wire   [0:0] or_cond2_fu_567_p2;
wire   [31:0] resultAmplitude_5_fu_579_p3;
wire   [31:0] resultAmplitude_6_fu_586_p3;
reg   [67:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 wave_in_V_0_sel_rd = 1'b0;
#0 wave_in_V_0_sel_wr = 1'b0;
#0 wave_in_V_0_state = 2'd0;
#0 wave_out_V_1_sel_rd = 1'b0;
#0 wave_out_V_1_sel_wr = 1'b0;
#0 wave_out_V_1_state = 2'd0;
#0 lastpress = 32'd0;
#0 releaseTime = 32'd0;
#0 sustainTime = 32'd0;
#0 releaseSlope = 32'd0;
#0 wait_r = 1'd0;
#0 time_r = 32'd0;
#0 ap_CS_fsm = 68'd1;
end

envelope_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
envelope_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .press(press),
    .attackDuration(attackDuration),
    .decayDuration(decayDuration),
    .sustainAmplitude(sustainAmplitude),
    .releaseDuration(releaseDuration)
);

envelope_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_154_p0),
    .din1(grp_fu_154_p1),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

envelope_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_160_p0),
    .din1(grp_fu_160_p1),
    .ce(1'b1),
    .dout(grp_fu_160_p2)
);

envelope_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fdiv_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_164_p0),
    .din1(reg_189),
    .ce(1'b1),
    .dout(grp_fu_164_p2)
);

envelope_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fdiv_32ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_195),
    .din1(tmp_4_reg_654),
    .ce(1'b1),
    .dout(grp_fu_169_p2)
);

envelope_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_sitofp_3eOg_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_173_p0),
    .ce(1'b1),
    .dout(grp_fu_173_p1)
);

envelope_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_sitofp_3eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_reg_649),
    .ce(1'b1),
    .dout(grp_fu_176_p1)
);

envelope_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
envelope_fcmp_32nfYi_U7(
    .din0(sustainAmplitude_rea_reg_621),
    .din1(32'd1065353216),
    .opcode(5'd2),
    .dout(tmp_32_fu_179_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == wave_in_V_0_ack_out) & (1'b1 == wave_in_V_0_vld_out))) begin
            wave_in_V_0_sel_rd <= ~wave_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_in))) begin
            wave_in_V_0_sel_wr <= ~wave_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd3)) | ((1'b0 == wave_in_V_0_vld_in) & (wave_in_V_0_state == 2'd2)))) begin
            wave_in_V_0_state <= 2'd2;
        end else if ((((1'b1 == wave_in_V_0_vld_in) & (1'b0 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd3)) | ((1'b0 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd1)))) begin
            wave_in_V_0_state <= 2'd1;
        end else if ((((1'b1 == wave_in_V_0_vld_in) & (wave_in_V_0_state == 2'd2)) | ((1'b1 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd1)) | ((wave_in_V_0_state == 2'd3) & ~((1'b1 == wave_in_V_0_vld_in) & (1'b0 == wave_in_V_0_ack_out)) & ~((1'b0 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_out))))) begin
            wave_in_V_0_state <= 2'd3;
        end else begin
            wave_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == wave_out_V_1_ack_out) & (1'b1 == wave_out_V_1_vld_out))) begin
            wave_out_V_1_sel_rd <= ~wave_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_in))) begin
            wave_out_V_1_sel_wr <= ~wave_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_out) & (2'd3 == wave_out_V_1_state)) | ((1'b0 == wave_out_V_1_vld_in) & (2'd2 == wave_out_V_1_state)))) begin
            wave_out_V_1_state <= 2'd2;
        end else if ((((1'b1 == wave_out_V_1_vld_in) & (1'b0 == wave_out_V_1_ack_out) & (2'd3 == wave_out_V_1_state)) | ((1'b0 == wave_out_V_1_ack_out) & (2'd1 == wave_out_V_1_state)))) begin
            wave_out_V_1_state <= 2'd1;
        end else if ((((1'b1 == wave_out_V_1_vld_in) & (2'd2 == wave_out_V_1_state)) | ((1'b1 == wave_out_V_1_ack_out) & (2'd1 == wave_out_V_1_state)) | ((2'd3 == wave_out_V_1_state) & ~((1'b1 == wave_out_V_1_vld_in) & (1'b0 == wave_out_V_1_ack_out)) & ~((1'b0 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_out))))) begin
            wave_out_V_1_state <= 2'd3;
        end else begin
            wave_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == or_cond_4_reg_689))) begin
        releaseTime_flag_reg_123 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == or_cond_4_fu_275_p2))) begin
        releaseTime_flag_reg_123 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == or_cond_4_reg_689))) begin
        releaseTime_loc_reg_136 <= releaseDuration_read_reg_612;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == or_cond_4_fu_275_p2))) begin
        releaseTime_loc_reg_136 <= releaseTime;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == or_cond_4_reg_689))) begin
        sustainTime_loc_reg_145 <= grp_fu_184_p2;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == or_cond_4_fu_275_p2))) begin
        sustainTime_loc_reg_145 <= sustainTime;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        attackDuration_read_reg_636 <= attackDuration;
        decayDuration_read_reg_629 <= decayDuration;
        press_read_reg_643 <= press;
        releaseDuration_read_reg_612 <= releaseDuration;
        sustainAmplitude_rea_reg_621 <= sustainAmplitude;
        tmp_3_reg_649 <= tmp_3_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        attackSlope_reg_664 <= grp_fu_164_p2;
        decaySlope_reg_669 <= grp_fu_169_p2;
        or_cond_4_reg_689 <= or_cond_4_fu_275_p2;
        sustainAmplitude_ass_reg_674 <= sustainAmplitude_ass_fu_253_p3;
        tmp_7_reg_681 <= tmp_7_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        lastpress <= press_read_reg_643;
        not_tmp_7_reg_718 <= not_tmp_7_fu_318_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        not_or_cond_reg_810 <= not_or_cond_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state29) | ((1'b1 == ap_CS_fsm_state53) & (1'd1 == tmp_16_reg_748) & (1'd0 == sel_tmp2_reg_778) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795)) | ((1'b1 == ap_CS_fsm_state53) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778)) | ((1'b1 == ap_CS_fsm_state53) & (1'd1 == sel_tmp5_reg_795)))) begin
        reg_189 <= grp_fu_173_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) | ((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state62)) | ((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state62)))) begin
        reg_195 <= grp_fu_154_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == tmp_16_reg_748) & (1'd0 == sel_tmp2_reg_778) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state57)) | ((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state57)) | ((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state57)) | ((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state66)))) begin
        reg_201 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state45) & (1'd0 == or_cond_4_reg_689))) begin
        releaseSlope <= grp_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (wave_in_V_0_vld_out == 1'b1) & (1'd1 == releaseTime_flag_1_s_fu_379_p2))) begin
        releaseTime <= releaseTime_new_1_re_fu_385_p3;
        sustainTime <= sustainTime_new_1_tm_fu_399_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state66))) begin
        resultAmplitude_7_reg_815 <= resultAmplitude_7_fu_593_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        sel_tmp2_reg_778 <= sel_tmp2_fu_460_p2;
        sel_tmp3_reg_789 <= sel_tmp3_fu_522_p2;
        sel_tmp5_reg_795 <= sel_tmp5_fu_534_p2;
        sel_tmp8_reg_784 <= sel_tmp8_fu_510_p2;
        tmp_20_reg_768 <= tmp_20_fu_443_p2;
        tmp_26_reg_773 <= tmp_26_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (wave_in_V_0_vld_out == 1'b1))) begin
        sustainTime_new_1_tm_reg_733 <= sustainTime_new_1_tm_fu_399_p3;
        time_load_s_reg_739 <= time_load_s_fu_407_p3;
        tmp_16_reg_748 <= tmp_16_fu_415_p2;
        tmp_19_reg_756 <= tmp_19_fu_432_p2;
        tmp_25_reg_762 <= tmp_25_fu_437_p2;
        tmp_36_reg_725 <= wave_in_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        time_r <= tmp_31_fu_543_p2;
        wait_flag_1_reg_801 <= wait_flag_1_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_32_reg_659 <= tmp_32_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_4_reg_654 <= grp_fu_176_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == or_cond_4_fu_275_p2))) begin
        tmp_s_reg_703 <= tmp_s_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state68) & (wave_out_V_1_ack_in == 1'b1) & (1'd1 == wait_flag_1_reg_801))) begin
        wait_r <= not_or_cond_reg_810;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_in_V_0_load_A)) begin
        wave_in_V_0_payload_A <= wave_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_in_V_0_load_B)) begin
        wave_in_V_0_payload_B <= wave_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_out_V_1_load_A)) begin
        wave_out_V_1_payload_A <= resultAmplitude_fu_600_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_out_V_1_load_B)) begin
        wave_out_V_1_payload_B <= resultAmplitude_fu_600_p3;
    end
end

always @ (*) begin
    if ((((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state58)) | ((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state58)))) begin
        grp_fu_154_p0 = reg_201;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_154_p0 = sustainAmplitude_rea_reg_621;
    end else begin
        grp_fu_154_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state58))) begin
        grp_fu_154_p1 = sustainAmplitude_ass_reg_674;
    end else if (((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state58))) begin
        grp_fu_154_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_154_p1 = 32'd3212836864;
    end else begin
        grp_fu_154_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_16_reg_748) & (1'd0 == sel_tmp2_reg_778) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state63)) | ((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state63)) | ((1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state63) & (1'd1 == sel_tmp3_reg_789)) | ((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state63)))) begin
        grp_fu_160_p0 = tmp_36_reg_725;
    end else if (((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_160_p0 = releaseSlope;
    end else if (((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_160_p0 = decaySlope_reg_669;
    end else if (((1'd1 == tmp_16_reg_748) & (1'd0 == sel_tmp2_reg_778) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state54))) begin
        grp_fu_160_p0 = attackSlope_reg_664;
    end else begin
        grp_fu_160_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state63) & (1'd1 == sel_tmp3_reg_789))) begin
        grp_fu_160_p1 = sustainAmplitude_ass_reg_674;
    end else if ((((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state63)) | ((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state63)))) begin
        grp_fu_160_p1 = reg_195;
    end else if (((1'd1 == tmp_16_reg_748) & (1'd0 == sel_tmp2_reg_778) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state63))) begin
        grp_fu_160_p1 = reg_201;
    end else if ((((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state54)) | ((1'd1 == tmp_16_reg_748) & (1'd0 == sel_tmp2_reg_778) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state54)) | ((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state54)))) begin
        grp_fu_160_p1 = reg_189;
    end else begin
        grp_fu_160_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_164_p0 = tmp_9_fu_302_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_164_p0 = 32'd1065353216;
    end else begin
        grp_fu_164_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state48))) begin
        grp_fu_173_p0 = tmp_26_reg_773;
    end else if (((1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'd1 == sel_tmp2_reg_778) & (1'b1 == ap_CS_fsm_state48))) begin
        grp_fu_173_p0 = tmp_20_reg_768;
    end else if (((1'd1 == tmp_16_reg_748) & (1'd0 == sel_tmp2_reg_778) & (1'd0 == sel_tmp3_reg_789) & (1'd0 == sel_tmp5_reg_795) & (1'b1 == ap_CS_fsm_state48))) begin
        grp_fu_173_p0 = time_load_s_reg_739;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        grp_fu_173_p0 = tmp_s_reg_703;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_173_p0 = attackDuration_read_reg_636;
    end else begin
        grp_fu_173_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state46) & (wave_in_V_0_vld_out == 1'b1))) begin
        wave_in_V_0_ack_out = 1'b1;
    end else begin
        wave_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == wave_in_V_0_sel)) begin
        wave_in_V_0_data_out = wave_in_V_0_payload_B;
    end else begin
        wave_in_V_0_data_out = wave_in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        wave_in_V_TDATA_blk_n = wave_in_V_0_state[1'd0];
    end else begin
        wave_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == wave_out_V_1_sel)) begin
        wave_out_V_1_data_out = wave_out_V_1_payload_B;
    end else begin
        wave_out_V_1_data_out = wave_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) & (wave_out_V_1_ack_in == 1'b1))) begin
        wave_out_V_1_vld_in = 1'b1;
    end else begin
        wave_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state68))) begin
        wave_out_V_TDATA_blk_n = wave_out_V_1_state[1'd1];
    end else begin
        wave_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == or_cond_4_fu_275_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (wave_in_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            if (((1'b1 == ap_CS_fsm_state67) & (wave_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state67;
            end
        end
        ap_ST_fsm_state68 : begin
            if (((1'b1 == ap_CS_fsm_state68) & (wave_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_184_p2 = (decayDuration_read_reg_629 + 32'd1);

assign not_or_cond_fu_573_p2 = (or_cond2_fu_567_p2 ^ 1'd1);

assign not_sel_tmp7_fu_481_p2 = (sel_tmp6_demorgan_fu_471_p2 | tmp_24_not_fu_475_p2);

assign not_sel_tmp_fu_498_p2 = (sel_tmp13_demorgan_fu_487_p2 | tmp_25_not_fu_493_p2);

assign not_tmp_7_fu_318_p2 = (tmp_7_reg_681 ^ 1'd1);

assign not_tmp_s_fu_455_p2 = (tmp_16_reg_748 ^ 1'd1);

assign notlhs_fu_230_p2 = ((tmp_5_fu_216_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_236_p2 = ((tmp_fu_226_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond1_fu_563_p2 = (sel_tmp2_reg_778 | tmp_16_reg_748);

assign or_cond2_fu_567_p2 = (or_cond_fu_559_p2 | or_cond1_fu_563_p2);

assign or_cond_4_fu_275_p2 = (tmp_6_fu_264_p2 | tmp_7_fu_270_p2);

assign or_cond_fu_559_p2 = (sel_tmp5_reg_795 | sel_tmp3_reg_789);

assign releaseTime_flag_1_s_fu_379_p2 = (tmp1_fu_374_p2 | releaseTime_flag_reg_123);

assign releaseTime_loc_1_fu_345_p3 = ((tmp_7_reg_681[0:0] === 1'b1) ? releaseTime_loc_reg_136 : tmp_13_fu_333_p2);

assign releaseTime_loc_1_re_fu_392_p3 = ((tmp_14_fu_365_p2[0:0] === 1'b1) ? releaseTime_loc_1_fu_345_p3 : releaseDuration_read_reg_612);

assign releaseTime_new_1_fu_339_p3 = ((tmp_7_reg_681[0:0] === 1'b1) ? releaseDuration_read_reg_612 : tmp_13_fu_333_p2);

assign releaseTime_new_1_re_fu_385_p3 = ((tmp_14_fu_365_p2[0:0] === 1'b1) ? releaseTime_new_1_fu_339_p3 : releaseDuration_read_reg_612);

assign resultAmplitude_5_fu_579_p3 = ((tmp_16_reg_748[0:0] === 1'b1) ? grp_fu_160_p2 : 32'd0);

assign resultAmplitude_6_fu_586_p3 = ((sel_tmp2_reg_778[0:0] === 1'b1) ? grp_fu_160_p2 : resultAmplitude_5_fu_579_p3);

assign resultAmplitude_7_fu_593_p3 = ((sel_tmp3_reg_789[0:0] === 1'b1) ? grp_fu_160_p2 : resultAmplitude_6_fu_586_p3);

assign resultAmplitude_fu_600_p3 = ((sel_tmp5_reg_795[0:0] === 1'b1) ? reg_201 : resultAmplitude_7_reg_815);

assign sel_tmp13_demorgan_fu_487_p2 = (sel_tmp6_demorgan_fu_471_p2 | tmp_24_fu_447_p2);

assign sel_tmp1_fu_516_p2 = (sel_tmp6_demorgan_fu_471_p2 ^ 1'd1);

assign sel_tmp2_fu_460_p2 = (tmp_19_reg_756 & not_tmp_s_fu_455_p2);

assign sel_tmp3_fu_522_p2 = (tmp_24_fu_447_p2 & sel_tmp1_fu_516_p2);

assign sel_tmp4_fu_528_p2 = (sel_tmp13_demorgan_fu_487_p2 ^ 1'd1);

assign sel_tmp5_fu_534_p2 = (tmp_25_reg_762 & sel_tmp4_fu_528_p2);

assign sel_tmp6_demorgan_fu_471_p2 = (tmp_16_reg_748 | tmp_19_reg_756);

assign sel_tmp8_fu_510_p2 = (tmp2_fu_504_p2 & sel_tmp_fu_465_p2);

assign sel_tmp_fu_465_p2 = (sel_tmp2_fu_460_p2 ^ not_tmp_s_fu_455_p2);

assign sustainAmplitude_ass_fu_253_p3 = ((tmp_33_fu_248_p2[0:0] === 1'b1) ? 32'd1065353216 : sustainAmplitude_rea_reg_621);

assign sustainAmplitude_to_s_fu_213_p1 = sustainAmplitude_rea_reg_621;

assign sustainTime_new_1_fu_352_p3 = ((tmp_7_reg_681[0:0] === 1'b1) ? sustainTime_loc_reg_145 : tmp_12_fu_327_p2);

assign sustainTime_new_1_tm_fu_399_p3 = ((tmp_14_fu_365_p2[0:0] === 1'b1) ? sustainTime_new_1_fu_352_p3 : grp_fu_184_p2);

assign time_load_s_fu_407_p3 = ((tmp_14_fu_365_p2[0:0] === 1'b1) ? time_r : 32'd0);

assign tmp1_fu_374_p2 = (wait_r | not_tmp_7_reg_718);

assign tmp2_fu_504_p2 = (not_sel_tmp7_fu_481_p2 & not_sel_tmp_fu_498_p2);

assign tmp_12_fu_327_p2 = (sustainTime_loc_reg_145 + 32'd1);

assign tmp_13_fu_333_p2 = (releaseTime_loc_reg_136 + 32'd1);

assign tmp_14_fu_365_p2 = (tmp_34_fu_359_p2 | not_tmp_7_reg_718);

assign tmp_16_fu_415_p2 = (($signed(time_load_s_fu_407_p3) < $signed(attackDuration_read_reg_636)) ? 1'b1 : 1'b0);

assign tmp_19_fu_432_p2 = (($signed(time_load_s_fu_407_p3) < $signed(decayDuration_read_reg_629)) ? 1'b1 : 1'b0);

assign tmp_20_fu_443_p2 = (time_load_s_reg_739 - attackDuration_read_reg_636);

assign tmp_24_fu_447_p2 = (($signed(time_load_s_reg_739) < $signed(sustainTime_new_1_tm_reg_733)) ? 1'b1 : 1'b0);

assign tmp_24_not_fu_475_p2 = (tmp_24_fu_447_p2 ^ 1'd1);

assign tmp_25_fu_437_p2 = (($signed(time_load_s_fu_407_p3) < $signed(releaseTime_loc_1_re_fu_392_p3)) ? 1'b1 : 1'b0);

assign tmp_25_not_fu_493_p2 = (tmp_25_reg_762 ^ 1'd1);

assign tmp_26_fu_451_p2 = (time_load_s_reg_739 - sustainTime_new_1_tm_reg_733);

assign tmp_30_fu_242_p2 = (notrhs_fu_236_p2 | notlhs_fu_230_p2);

assign tmp_31_fu_543_p2 = (time_load_s_reg_739 + 32'd1);

assign tmp_33_fu_248_p2 = (tmp_30_fu_242_p2 & tmp_32_reg_659);

assign tmp_34_fu_359_p2 = (wait_r ^ 1'd1);

assign tmp_3_fu_207_p2 = (decayDuration - attackDuration);

assign tmp_5_fu_216_p4 = {{sustainAmplitude_to_s_fu_213_p1[30:23]}};

assign tmp_6_fu_264_p2 = ((lastpress != 32'd0) ? 1'b1 : 1'b0);

assign tmp_7_fu_270_p2 = ((press_read_reg_643 == 32'd0) ? 1'b1 : 1'b0);

assign tmp_9_fu_302_p1 = tmp_9_neg_fu_296_p2;

assign tmp_9_neg_fu_296_p2 = (tmp_9_to_int_fu_293_p1 ^ 32'd2147483648);

assign tmp_9_to_int_fu_293_p1 = sustainAmplitude_ass_reg_674;

assign tmp_fu_226_p1 = sustainAmplitude_to_s_fu_213_p1[22:0];

assign tmp_s_fu_289_p2 = (releaseDuration_read_reg_612 - decayDuration_read_reg_629);

assign wait_flag_1_fu_539_p2 = (sel_tmp8_reg_784 | not_tmp_7_reg_718);

assign wave_in_V_0_ack_in = wave_in_V_0_state[1'd1];

assign wave_in_V_0_load_A = (wave_in_V_0_state_cmp_full & ~wave_in_V_0_sel_wr);

assign wave_in_V_0_load_B = (wave_in_V_0_sel_wr & wave_in_V_0_state_cmp_full);

assign wave_in_V_0_sel = wave_in_V_0_sel_rd;

assign wave_in_V_0_state_cmp_full = ((wave_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign wave_in_V_0_vld_in = wave_in_V_TVALID;

assign wave_in_V_0_vld_out = wave_in_V_0_state[1'd0];

assign wave_in_V_TREADY = wave_in_V_0_state[1'd1];

assign wave_out_V_1_ack_in = wave_out_V_1_state[1'd1];

assign wave_out_V_1_ack_out = wave_out_V_TREADY;

assign wave_out_V_1_load_A = (wave_out_V_1_state_cmp_full & ~wave_out_V_1_sel_wr);

assign wave_out_V_1_load_B = (wave_out_V_1_sel_wr & wave_out_V_1_state_cmp_full);

assign wave_out_V_1_sel = wave_out_V_1_sel_rd;

assign wave_out_V_1_state_cmp_full = ((wave_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign wave_out_V_1_vld_out = wave_out_V_1_state[1'd0];

assign wave_out_V_TDATA = wave_out_V_1_data_out;

assign wave_out_V_TVALID = wave_out_V_1_state[1'd0];

endmodule //envelope
