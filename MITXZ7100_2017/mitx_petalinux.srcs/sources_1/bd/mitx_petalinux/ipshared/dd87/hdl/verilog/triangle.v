// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="triangle,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=406,HLS_SYN_LUT=223}" *)

module triangle (
        ap_clk,
        ap_rst_n,
        out_V_TDATA,
        out_V_TVALID,
        out_V_TREADY
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst_n;
output  [31:0] out_V_TDATA;
output   out_V_TVALID;
input   out_V_TREADY;

reg    ap_rst_n_inv;
reg   [31:0] out_V_1_data_out;
reg    out_V_1_vld_in;
wire    out_V_1_vld_out;
wire    out_V_1_ack_in;
wire    out_V_1_ack_out;
reg   [31:0] out_V_1_payload_A;
reg   [31:0] out_V_1_payload_B;
reg    out_V_1_sel_rd;
reg    out_V_1_sel_wr;
wire    out_V_1_sel;
wire    out_V_1_load_A;
wire    out_V_1_load_B;
reg   [1:0] out_V_1_state;
wire    out_V_1_state_cmp_full;
reg   [23:0] val_V;
reg   [31:0] err;
reg    out_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_fu_53_p3;
wire   [0:0] tmp_7_fu_72_p2;
reg   [0:0] tmp_7_reg_126;
wire   [23:0] val_V_new_fu_105_p2;
wire   [31:0] err_new_fu_84_p3;
wire   [31:0] tmp_6_fu_66_p2;
wire   [31:0] tmp_8_fu_78_p2;
wire   [23:0] val_V_new_v_cast_cas_fu_98_p3;
reg   [1:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 out_V_1_sel_rd = 1'b0;
#0 out_V_1_sel_wr = 1'b0;
#0 out_V_1_state = 2'd0;
#0 val_V = 24'd0;
#0 err = 32'd4294919296;
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_ack_out) & (1'b1 == out_V_1_vld_out))) begin
            out_V_1_sel_rd <= ~out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_in))) begin
            out_V_1_sel_wr <= ~out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out) & (out_V_1_state == 2'd3)) | ((1'b0 == out_V_1_vld_in) & (out_V_1_state == 2'd2)))) begin
            out_V_1_state <= 2'd2;
        end else if ((((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out) & (out_V_1_state == 2'd3)) | ((1'b0 == out_V_1_ack_out) & (out_V_1_state == 2'd1)))) begin
            out_V_1_state <= 2'd1;
        end else if ((((1'b1 == out_V_1_vld_in) & (out_V_1_state == 2'd2)) | ((1'b1 == out_V_1_ack_out) & (out_V_1_state == 2'd1)) | ((out_V_1_state == 2'd3) & ~((1'b1 == out_V_1_vld_in) & (1'b0 == out_V_1_ack_out)) & ~((1'b0 == out_V_1_vld_in) & (1'b1 == out_V_1_ack_out))))) begin
            out_V_1_state <= 2'd3;
        end else begin
            out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (out_V_1_ack_in == 1'b1))) begin
        err <= err_new_fu_84_p3;
        tmp_7_reg_126 <= tmp_7_fu_72_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_A)) begin
        out_V_1_payload_A <= tmp_fu_53_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_V_1_load_B)) begin
        out_V_1_payload_B <= tmp_fu_53_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (out_V_1_ack_in == 1'b1))) begin
        val_V <= val_V_new_fu_105_p2;
    end
end

always @ (*) begin
    if ((1'b1 == out_V_1_sel)) begin
        out_V_1_data_out = out_V_1_payload_B;
    end else begin
        out_V_1_data_out = out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (out_V_1_ack_in == 1'b1))) begin
        out_V_1_vld_in = 1'b1;
    end else begin
        out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        out_V_TDATA_blk_n = out_V_1_state[1'd1];
    end else begin
        out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign err_new_fu_84_p3 = ((tmp_7_fu_72_p2[0:0] === 1'b1) ? tmp_8_fu_78_p2 : tmp_6_fu_66_p2);

assign out_V_1_ack_in = out_V_1_state[1'd1];

assign out_V_1_ack_out = out_V_TREADY;

assign out_V_1_load_A = (out_V_1_state_cmp_full & ~out_V_1_sel_wr);

assign out_V_1_load_B = (out_V_1_sel_wr & out_V_1_state_cmp_full);

assign out_V_1_sel = out_V_1_sel_rd;

assign out_V_1_state_cmp_full = ((out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_V_1_vld_out = out_V_1_state[1'd0];

assign out_V_TDATA = out_V_1_data_out;

assign out_V_TVALID = out_V_1_state[1'd0];

assign tmp_6_fu_66_p2 = (err + 32'd32000);

assign tmp_7_fu_72_p2 = (($signed(tmp_6_fu_66_p2) > $signed(32'd48000)) ? 1'b1 : 1'b0);

assign tmp_8_fu_78_p2 = ($signed(err) + $signed(32'd4294903296));

assign tmp_fu_53_p3 = {{val_V}, {8'd0}};

assign val_V_new_fu_105_p2 = (val_V + val_V_new_v_cast_cas_fu_98_p3);

assign val_V_new_v_cast_cas_fu_98_p3 = ((tmp_7_reg_126[0:0] === 1'b1) ? 24'd349526 : 24'd349525);

endmodule //triangle
