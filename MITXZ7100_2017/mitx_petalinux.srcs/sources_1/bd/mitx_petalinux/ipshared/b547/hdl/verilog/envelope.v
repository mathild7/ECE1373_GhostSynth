// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="envelope,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z100ffg900-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.232000,HLS_SYN_LAT=45,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=5,HLS_SYN_FF=5744,HLS_SYN_LUT=7312}" *)

module envelope (
        ap_clk,
        ap_rst_n,
        wave_in_V_TDATA,
        wave_in_V_TVALID,
        wave_in_V_TREADY,
        wave_out_V_TDATA,
        wave_out_V_TVALID,
        wave_out_V_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP
);

parameter    ap_ST_fsm_state1 = 46'd1;
parameter    ap_ST_fsm_state2 = 46'd2;
parameter    ap_ST_fsm_state3 = 46'd4;
parameter    ap_ST_fsm_state4 = 46'd8;
parameter    ap_ST_fsm_state5 = 46'd16;
parameter    ap_ST_fsm_state6 = 46'd32;
parameter    ap_ST_fsm_state7 = 46'd64;
parameter    ap_ST_fsm_state8 = 46'd128;
parameter    ap_ST_fsm_state9 = 46'd256;
parameter    ap_ST_fsm_state10 = 46'd512;
parameter    ap_ST_fsm_state11 = 46'd1024;
parameter    ap_ST_fsm_state12 = 46'd2048;
parameter    ap_ST_fsm_state13 = 46'd4096;
parameter    ap_ST_fsm_state14 = 46'd8192;
parameter    ap_ST_fsm_state15 = 46'd16384;
parameter    ap_ST_fsm_state16 = 46'd32768;
parameter    ap_ST_fsm_state17 = 46'd65536;
parameter    ap_ST_fsm_state18 = 46'd131072;
parameter    ap_ST_fsm_state19 = 46'd262144;
parameter    ap_ST_fsm_state20 = 46'd524288;
parameter    ap_ST_fsm_state21 = 46'd1048576;
parameter    ap_ST_fsm_state22 = 46'd2097152;
parameter    ap_ST_fsm_state23 = 46'd4194304;
parameter    ap_ST_fsm_state24 = 46'd8388608;
parameter    ap_ST_fsm_state25 = 46'd16777216;
parameter    ap_ST_fsm_state26 = 46'd33554432;
parameter    ap_ST_fsm_state27 = 46'd67108864;
parameter    ap_ST_fsm_state28 = 46'd134217728;
parameter    ap_ST_fsm_state29 = 46'd268435456;
parameter    ap_ST_fsm_state30 = 46'd536870912;
parameter    ap_ST_fsm_state31 = 46'd1073741824;
parameter    ap_ST_fsm_state32 = 46'd2147483648;
parameter    ap_ST_fsm_state33 = 46'd4294967296;
parameter    ap_ST_fsm_state34 = 46'd8589934592;
parameter    ap_ST_fsm_state35 = 46'd17179869184;
parameter    ap_ST_fsm_state36 = 46'd34359738368;
parameter    ap_ST_fsm_state37 = 46'd68719476736;
parameter    ap_ST_fsm_state38 = 46'd137438953472;
parameter    ap_ST_fsm_state39 = 46'd274877906944;
parameter    ap_ST_fsm_state40 = 46'd549755813888;
parameter    ap_ST_fsm_state41 = 46'd1099511627776;
parameter    ap_ST_fsm_state42 = 46'd2199023255552;
parameter    ap_ST_fsm_state43 = 46'd4398046511104;
parameter    ap_ST_fsm_state44 = 46'd8796093022208;
parameter    ap_ST_fsm_state45 = 46'd17592186044416;
parameter    ap_ST_fsm_state46 = 46'd35184372088832;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] wave_in_V_TDATA;
input   wave_in_V_TVALID;
output   wave_in_V_TREADY;
output  [31:0] wave_out_V_TDATA;
output   wave_out_V_TVALID;
input   wave_out_V_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;

reg    ap_rst_n_inv;
reg   [31:0] wave_in_V_0_data_out;
wire    wave_in_V_0_vld_in;
wire    wave_in_V_0_vld_out;
wire    wave_in_V_0_ack_in;
reg    wave_in_V_0_ack_out;
reg   [31:0] wave_in_V_0_payload_A;
reg   [31:0] wave_in_V_0_payload_B;
reg    wave_in_V_0_sel_rd;
reg    wave_in_V_0_sel_wr;
wire    wave_in_V_0_sel;
wire    wave_in_V_0_load_A;
wire    wave_in_V_0_load_B;
reg   [1:0] wave_in_V_0_state;
wire    wave_in_V_0_state_cmp_full;
reg   [31:0] wave_out_V_1_data_out;
reg    wave_out_V_1_vld_in;
wire    wave_out_V_1_vld_out;
wire    wave_out_V_1_ack_in;
wire    wave_out_V_1_ack_out;
reg   [31:0] wave_out_V_1_payload_A;
reg   [31:0] wave_out_V_1_payload_B;
reg    wave_out_V_1_sel_rd;
reg    wave_out_V_1_sel_wr;
wire    wave_out_V_1_sel;
wire    wave_out_V_1_load_A;
wire    wave_out_V_1_load_B;
reg   [1:0] wave_out_V_1_state;
wire    wave_out_V_1_state_cmp_full;
wire   [31:0] press;
wire   [31:0] attackDuration;
wire   [31:0] decayDuration;
wire   [31:0] sustainAmplitude;
wire   [31:0] releaseDuration;
reg   [31:0] lastpress;
reg   [31:0] releaseTime;
reg   [31:0] sustainTime;
reg   [0:0] wait_r;
reg   [31:0] time_r;
reg    wave_in_V_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [45:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
reg    wave_out_V_TDATA_blk_n;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire   [31:0] grp_fu_148_p1;
reg   [31:0] reg_162;
wire    ap_CS_fsm_state8;
reg   [0:0] tmp_14_reg_699;
wire    ap_CS_fsm_state31;
reg   [0:0] sel_tmp2_reg_782;
reg   [0:0] sel_tmp3_reg_793;
reg   [0:0] sel_tmp5_reg_799;
wire   [31:0] grp_fu_125_p2;
reg   [31:0] reg_168;
wire    ap_CS_fsm_state40;
wire   [31:0] grp_fu_131_p2;
reg   [31:0] reg_174;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state44;
reg   [31:0] releaseDuration_read_reg_605;
wire    ap_CS_fsm_state1;
reg   [31:0] sustainAmplitude_rea_reg_614;
reg   [31:0] decayDuration_read_reg_622;
reg   [31:0] attackDuration_read_reg_630;
wire   [0:0] tmp_9_fu_184_p2;
reg   [0:0] tmp_9_reg_638;
wire   [0:0] tmp_s_fu_190_p2;
reg   [0:0] tmp_s_reg_643;
wire   [0:0] not_tmp_s_fu_206_p2;
reg   [0:0] not_tmp_s_reg_656;
wire   [0:0] releaseTime_flag_1_s_fu_240_p2;
reg   [0:0] releaseTime_flag_1_s_reg_662;
wire   [31:0] tmp_3_fu_246_p2;
reg   [31:0] tmp_3_reg_666;
wire   [31:0] tmp_6_fu_250_p2;
reg   [31:0] tmp_6_reg_671;
reg   [31:0] tmp_38_reg_676;
wire   [0:0] tmp_13_fu_259_p2;
reg   [0:0] tmp_13_reg_681;
wire   [31:0] time_load_s_fu_268_p3;
reg   [31:0] time_load_s_reg_688;
wire   [0:0] tmp_14_fu_276_p2;
wire   [31:0] grp_fu_151_p1;
reg   [31:0] tmp_4_reg_707;
wire   [31:0] grp_fu_154_p1;
reg   [31:0] tmp_7_reg_712;
wire   [0:0] tmp_30_fu_157_p2;
reg   [0:0] tmp_30_reg_717;
wire    ap_CS_fsm_state9;
wire   [31:0] sustainAmplitude_ass_fu_332_p3;
reg   [31:0] sustainAmplitude_ass_reg_727;
wire   [0:0] or_cond_4_fu_339_p2;
reg   [0:0] or_cond_4_reg_733;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_135_p2;
reg   [31:0] attackSlope_reg_739;
wire    ap_CS_fsm_state24;
wire   [31:0] grp_fu_140_p2;
reg   [31:0] decaySlope_reg_744;
wire   [31:0] grp_fu_144_p2;
reg   [31:0] releaseSlope_reg_749;
wire   [31:0] sustainTime_new_1_tm_fu_413_p3;
reg   [31:0] sustainTime_new_1_tm_reg_754;
wire   [0:0] tmp_17_fu_432_p2;
reg   [0:0] tmp_17_reg_760;
wire   [0:0] tmp_23_fu_436_p2;
reg   [0:0] tmp_23_reg_766;
wire   [31:0] tmp_18_fu_441_p2;
reg   [31:0] tmp_18_reg_772;
wire    ap_CS_fsm_state25;
wire   [31:0] tmp_24_fu_449_p2;
reg   [31:0] tmp_24_reg_777;
wire   [0:0] sel_tmp2_fu_458_p2;
wire   [0:0] sel_tmp8_fu_508_p2;
reg   [0:0] sel_tmp8_reg_788;
wire   [0:0] sel_tmp3_fu_520_p2;
wire   [0:0] sel_tmp5_fu_532_p2;
wire   [0:0] wait_flag_1_fu_537_p2;
reg   [0:0] wait_flag_1_reg_805;
wire    ap_CS_fsm_state26;
wire   [0:0] not_or_cond_fu_566_p2;
reg   [0:0] not_or_cond_reg_809;
wire   [31:0] resultAmplitude_7_fu_586_p3;
reg   [31:0] resultAmplitude_7_reg_814;
wire   [31:0] resultAmplitude_fu_593_p3;
wire   [31:0] releaseTime_new_1_re_fu_401_p3;
wire   [31:0] tmp_29_fu_541_p2;
reg   [31:0] grp_fu_125_p0;
reg   [31:0] grp_fu_125_p1;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state36;
reg   [31:0] grp_fu_131_p0;
reg   [31:0] grp_fu_131_p1;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_144_p0;
reg   [31:0] grp_fu_148_p0;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_33_fu_212_p1;
wire   [30:0] tmp_35_fu_222_p4;
wire   [0:0] tmp_34_fu_216_p2;
wire   [31:0] tmp_36_fu_232_p3;
wire   [0:0] tmp_32_fu_254_p2;
wire   [31:0] tmp_5_to_int_fu_281_p1;
wire   [31:0] tmp_5_neg_fu_284_p2;
wire   [7:0] tmp_8_fu_295_p4;
wire   [22:0] tmp_fu_305_p1;
wire   [0:0] notrhs_fu_315_p2;
wire   [0:0] notlhs_fu_309_p2;
wire   [0:0] tmp_28_fu_321_p2;
wire   [0:0] tmp_31_fu_327_p2;
wire   [31:0] tmp_10_fu_351_p2;
wire   [31:0] sustainTime_load_tmp_fu_362_p3;
wire   [31:0] releaseTime_load_rel_fu_356_p3;
wire   [31:0] tmp_12_fu_375_p2;
wire   [31:0] tmp_11_fu_369_p2;
wire   [31:0] releaseTime_new_1_fu_381_p3;
wire   [31:0] releaseTime_loc_1_fu_387_p3;
wire   [31:0] sustainTime_new_1_fu_394_p3;
wire   [31:0] releaseTime_loc_1_re_fu_407_p3;
wire   [0:0] not_tmp_1_fu_453_p2;
wire   [0:0] tmp_22_fu_445_p2;
wire   [0:0] sel_tmp6_demorgan_fu_469_p2;
wire   [0:0] tmp_22_not_fu_473_p2;
wire   [0:0] sel_tmp13_demorgan_fu_485_p2;
wire   [0:0] tmp_23_not_fu_491_p2;
wire   [0:0] not_sel_tmp7_fu_479_p2;
wire   [0:0] not_sel_tmp_fu_496_p2;
wire   [0:0] tmp1_fu_502_p2;
wire   [0:0] sel_tmp_fu_463_p2;
wire   [0:0] sel_tmp1_fu_514_p2;
wire   [0:0] sel_tmp4_fu_526_p2;
wire   [0:0] or_cond_fu_552_p2;
wire   [0:0] or_cond1_fu_556_p2;
wire   [0:0] or_cond2_fu_560_p2;
wire   [31:0] resultAmplitude_5_fu_572_p3;
wire   [31:0] resultAmplitude_6_fu_579_p3;
reg   [45:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 wave_in_V_0_sel_rd = 1'b0;
#0 wave_in_V_0_sel_wr = 1'b0;
#0 wave_in_V_0_state = 2'd0;
#0 wave_out_V_1_sel_rd = 1'b0;
#0 wave_out_V_1_sel_wr = 1'b0;
#0 wave_out_V_1_state = 2'd0;
#0 lastpress = 32'd0;
#0 releaseTime = 32'd0;
#0 sustainTime = 32'd0;
#0 wait_r = 1'd0;
#0 time_r = 32'd0;
#0 ap_CS_fsm = 46'd1;
end

envelope_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
envelope_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .press(press),
    .attackDuration(attackDuration),
    .decayDuration(decayDuration),
    .sustainAmplitude(sustainAmplitude),
    .releaseDuration(releaseDuration)
);

envelope_fadd_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fadd_32nbkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_125_p0),
    .din1(grp_fu_125_p1),
    .ce(1'b1),
    .dout(grp_fu_125_p2)
);

envelope_fmul_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fmul_32ncud_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_131_p0),
    .din1(grp_fu_131_p1),
    .ce(1'b1),
    .dout(grp_fu_131_p2)
);

envelope_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fdiv_32ndEe_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(32'd1065353216),
    .din1(reg_162),
    .ce(1'b1),
    .dout(grp_fu_135_p2)
);

envelope_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fdiv_32ndEe_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(reg_168),
    .din1(tmp_4_reg_707),
    .ce(1'b1),
    .dout(grp_fu_140_p2)
);

envelope_fdiv_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_fdiv_32ndEe_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_144_p0),
    .din1(tmp_7_reg_712),
    .ce(1'b1),
    .dout(grp_fu_144_p2)
);

envelope_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_sitofp_3eOg_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_148_p0),
    .ce(1'b1),
    .dout(grp_fu_148_p1)
);

envelope_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_sitofp_3eOg_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_3_reg_666),
    .ce(1'b1),
    .dout(grp_fu_151_p1)
);

envelope_sitofp_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
envelope_sitofp_3eOg_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(tmp_6_reg_671),
    .ce(1'b1),
    .dout(grp_fu_154_p1)
);

envelope_fcmp_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
envelope_fcmp_32nfYi_U9(
    .din0(sustainAmplitude_rea_reg_614),
    .din1(32'd1065353216),
    .opcode(5'd2),
    .dout(tmp_30_fu_157_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == wave_in_V_0_ack_out) & (1'b1 == wave_in_V_0_vld_out))) begin
            wave_in_V_0_sel_rd <= ~wave_in_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_in))) begin
            wave_in_V_0_sel_wr <= ~wave_in_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_in_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd3)) | ((1'b0 == wave_in_V_0_vld_in) & (wave_in_V_0_state == 2'd2)))) begin
            wave_in_V_0_state <= 2'd2;
        end else if ((((1'b1 == wave_in_V_0_vld_in) & (1'b0 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd3)) | ((1'b0 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd1)))) begin
            wave_in_V_0_state <= 2'd1;
        end else if ((((1'b1 == wave_in_V_0_vld_in) & (wave_in_V_0_state == 2'd2)) | ((1'b1 == wave_in_V_0_ack_out) & (wave_in_V_0_state == 2'd1)) | ((wave_in_V_0_state == 2'd3) & ~((1'b1 == wave_in_V_0_vld_in) & (1'b0 == wave_in_V_0_ack_out)) & ~((1'b0 == wave_in_V_0_vld_in) & (1'b1 == wave_in_V_0_ack_out))))) begin
            wave_in_V_0_state <= 2'd3;
        end else begin
            wave_in_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == wave_out_V_1_ack_out) & (1'b1 == wave_out_V_1_vld_out))) begin
            wave_out_V_1_sel_rd <= ~wave_out_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_in))) begin
            wave_out_V_1_sel_wr <= ~wave_out_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        wave_out_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_out) & (2'd3 == wave_out_V_1_state)) | ((1'b0 == wave_out_V_1_vld_in) & (2'd2 == wave_out_V_1_state)))) begin
            wave_out_V_1_state <= 2'd2;
        end else if ((((1'b1 == wave_out_V_1_vld_in) & (1'b0 == wave_out_V_1_ack_out) & (2'd3 == wave_out_V_1_state)) | ((1'b0 == wave_out_V_1_ack_out) & (2'd1 == wave_out_V_1_state)))) begin
            wave_out_V_1_state <= 2'd1;
        end else if ((((1'b1 == wave_out_V_1_vld_in) & (2'd2 == wave_out_V_1_state)) | ((1'b1 == wave_out_V_1_ack_out) & (2'd1 == wave_out_V_1_state)) | ((2'd3 == wave_out_V_1_state) & ~((1'b1 == wave_out_V_1_vld_in) & (1'b0 == wave_out_V_1_ack_out)) & ~((1'b0 == wave_out_V_1_vld_in) & (1'b1 == wave_out_V_1_ack_out))))) begin
            wave_out_V_1_state <= 2'd3;
        end else begin
            wave_out_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        attackDuration_read_reg_630 <= attackDuration;
        decayDuration_read_reg_622 <= decayDuration;
        lastpress <= press;
        not_tmp_s_reg_656 <= not_tmp_s_fu_206_p2;
        releaseDuration_read_reg_605 <= releaseDuration;
        releaseTime_flag_1_s_reg_662 <= releaseTime_flag_1_s_fu_240_p2;
        sustainAmplitude_rea_reg_614 <= sustainAmplitude;
        tmp_9_reg_638 <= tmp_9_fu_184_p2;
        tmp_s_reg_643 <= tmp_s_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == tmp_14_reg_699) & (1'b1 == ap_CS_fsm_state24))) begin
        attackSlope_reg_739 <= grp_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        decaySlope_reg_744 <= grp_fu_140_p2;
        releaseSlope_reg_749 <= grp_fu_144_p2;
        sustainTime_new_1_tm_reg_754 <= sustainTime_new_1_tm_fu_413_p3;
        tmp_17_reg_760 <= tmp_17_fu_432_p2;
        tmp_23_reg_766 <= tmp_23_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        not_or_cond_reg_809 <= not_or_cond_fu_566_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        or_cond_4_reg_733 <= or_cond_4_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & (1'd1 == tmp_14_reg_699)) | ((1'd1 == tmp_14_reg_699) & (1'b1 == ap_CS_fsm_state31) & (1'd0 == sel_tmp2_reg_782) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799)) | ((1'b1 == ap_CS_fsm_state31) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782)) | ((1'b1 == ap_CS_fsm_state31) & (1'd1 == sel_tmp5_reg_799)))) begin
        reg_162 <= grp_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state40)) | ((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state40)))) begin
        reg_168 <= grp_fu_125_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'd1 == tmp_14_reg_699) & (1'd0 == sel_tmp2_reg_782) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state35)) | ((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state35)) | ((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state35)) | ((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state44)))) begin
        reg_174 <= grp_fu_131_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (1'd0 == releaseTime_flag_1_s_reg_662))) begin
        releaseTime <= releaseTime_new_1_re_fu_401_p3;
        sustainTime <= sustainTime_new_1_tm_fu_413_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state44))) begin
        resultAmplitude_7_reg_814 <= resultAmplitude_7_fu_586_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        sel_tmp2_reg_782 <= sel_tmp2_fu_458_p2;
        sel_tmp3_reg_793 <= sel_tmp3_fu_520_p2;
        sel_tmp5_reg_799 <= sel_tmp5_fu_532_p2;
        sel_tmp8_reg_788 <= sel_tmp8_fu_508_p2;
        tmp_18_reg_772 <= tmp_18_fu_441_p2;
        tmp_24_reg_777 <= tmp_24_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sustainAmplitude_ass_reg_727 <= sustainAmplitude_ass_fu_332_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (wave_in_V_0_vld_out == 1'b1))) begin
        time_load_s_reg_688 <= time_load_s_fu_268_p3;
        tmp_13_reg_681 <= tmp_13_fu_259_p2;
        tmp_14_reg_699 <= tmp_14_fu_276_p2;
        tmp_38_reg_676 <= wave_in_V_0_data_out;
        tmp_3_reg_666 <= tmp_3_fu_246_p2;
        tmp_6_reg_671 <= tmp_6_fu_250_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        time_r <= tmp_29_fu_541_p2;
        wait_flag_1_reg_805 <= wait_flag_1_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_30_reg_717 <= tmp_30_fu_157_p2;
        tmp_4_reg_707 <= grp_fu_151_p1;
        tmp_7_reg_712 <= grp_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (wave_out_V_1_ack_in == 1'b1) & (1'd1 == wait_flag_1_reg_805))) begin
        wait_r <= not_or_cond_reg_809;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_in_V_0_load_A)) begin
        wave_in_V_0_payload_A <= wave_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_in_V_0_load_B)) begin
        wave_in_V_0_payload_B <= wave_in_V_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_out_V_1_load_A)) begin
        wave_out_V_1_payload_A <= resultAmplitude_fu_593_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == wave_out_V_1_load_B)) begin
        wave_out_V_1_payload_B <= resultAmplitude_fu_593_p3;
    end
end

always @ (*) begin
    if ((((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state36)) | ((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state36)))) begin
        grp_fu_125_p0 = reg_174;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_125_p0 = sustainAmplitude_rea_reg_614;
    end else begin
        grp_fu_125_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state36))) begin
        grp_fu_125_p1 = sustainAmplitude_ass_reg_727;
    end else if (((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state36))) begin
        grp_fu_125_p1 = 32'd1065353216;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_125_p1 = 32'd3212836864;
    end else begin
        grp_fu_125_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'd1 == tmp_14_reg_699) & (1'd0 == sel_tmp2_reg_782) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state41)) | ((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state41)) | ((1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state41) & (1'd1 == sel_tmp3_reg_793)) | ((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state41)))) begin
        grp_fu_131_p0 = tmp_38_reg_676;
    end else if (((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_131_p0 = releaseSlope_reg_749;
    end else if (((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_131_p0 = decaySlope_reg_744;
    end else if (((1'd1 == tmp_14_reg_699) & (1'd0 == sel_tmp2_reg_782) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state32))) begin
        grp_fu_131_p0 = attackSlope_reg_739;
    end else begin
        grp_fu_131_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state41) & (1'd1 == sel_tmp3_reg_793))) begin
        grp_fu_131_p1 = sustainAmplitude_ass_reg_727;
    end else if ((((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state41)) | ((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state41)))) begin
        grp_fu_131_p1 = reg_168;
    end else if (((1'd1 == tmp_14_reg_699) & (1'd0 == sel_tmp2_reg_782) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state41))) begin
        grp_fu_131_p1 = reg_174;
    end else if ((((1'd1 == tmp_14_reg_699) & (1'd0 == sel_tmp2_reg_782) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state32)) | ((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state32)) | ((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state32)))) begin
        grp_fu_131_p1 = reg_162;
    end else begin
        grp_fu_131_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'd1 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_148_p0 = tmp_24_reg_777;
    end else if (((1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'd1 == sel_tmp2_reg_782) & (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_148_p0 = tmp_18_reg_772;
    end else if (((1'd1 == tmp_14_reg_699) & (1'd0 == sel_tmp2_reg_782) & (1'd0 == sel_tmp3_reg_793) & (1'd0 == sel_tmp5_reg_799) & (1'b1 == ap_CS_fsm_state26))) begin
        grp_fu_148_p0 = time_load_s_reg_688;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_148_p0 = attackDuration_read_reg_630;
    end else begin
        grp_fu_148_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (wave_in_V_0_vld_out == 1'b1))) begin
        wave_in_V_0_ack_out = 1'b1;
    end else begin
        wave_in_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == wave_in_V_0_sel)) begin
        wave_in_V_0_data_out = wave_in_V_0_payload_B;
    end else begin
        wave_in_V_0_data_out = wave_in_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        wave_in_V_TDATA_blk_n = wave_in_V_0_state[1'd0];
    end else begin
        wave_in_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == wave_out_V_1_sel)) begin
        wave_out_V_1_data_out = wave_out_V_1_payload_B;
    end else begin
        wave_out_V_1_data_out = wave_out_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) & (wave_out_V_1_ack_in == 1'b1))) begin
        wave_out_V_1_vld_in = 1'b1;
    end else begin
        wave_out_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46))) begin
        wave_out_V_TDATA_blk_n = wave_out_V_1_state[1'd1];
    end else begin
        wave_out_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (wave_in_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((1'b1 == ap_CS_fsm_state45) & (wave_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            if (((1'b1 == ap_CS_fsm_state46) & (wave_out_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_144_p0 = tmp_5_neg_fu_284_p2;

assign not_or_cond_fu_566_p2 = (or_cond2_fu_560_p2 ^ 1'd1);

assign not_sel_tmp7_fu_479_p2 = (sel_tmp6_demorgan_fu_469_p2 | tmp_22_not_fu_473_p2);

assign not_sel_tmp_fu_496_p2 = (sel_tmp13_demorgan_fu_485_p2 | tmp_23_not_fu_491_p2);

assign not_tmp_1_fu_453_p2 = (tmp_14_reg_699 ^ 1'd1);

assign not_tmp_s_fu_206_p2 = (tmp_s_fu_190_p2 ^ 1'd1);

assign notlhs_fu_309_p2 = ((tmp_8_fu_295_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_315_p2 = ((tmp_fu_305_p1 == 23'd0) ? 1'b1 : 1'b0);

assign or_cond1_fu_556_p2 = (sel_tmp2_reg_782 | tmp_14_reg_699);

assign or_cond2_fu_560_p2 = (or_cond_fu_552_p2 | or_cond1_fu_556_p2);

assign or_cond_4_fu_339_p2 = (tmp_9_reg_638 | tmp_s_reg_643);

assign or_cond_fu_552_p2 = (sel_tmp5_reg_799 | sel_tmp3_reg_793);

assign releaseTime_flag_1_s_fu_240_p2 = ((tmp_36_fu_232_p3 == 32'd0) ? 1'b1 : 1'b0);

assign releaseTime_load_rel_fu_356_p3 = ((or_cond_4_reg_733[0:0] === 1'b1) ? releaseTime : releaseDuration_read_reg_605);

assign releaseTime_loc_1_fu_387_p3 = ((tmp_s_reg_643[0:0] === 1'b1) ? releaseTime : tmp_12_fu_375_p2);

assign releaseTime_loc_1_re_fu_407_p3 = ((tmp_13_reg_681[0:0] === 1'b1) ? releaseTime_loc_1_fu_387_p3 : releaseDuration_read_reg_605);

assign releaseTime_new_1_fu_381_p3 = ((tmp_s_reg_643[0:0] === 1'b1) ? releaseDuration_read_reg_605 : tmp_12_fu_375_p2);

assign releaseTime_new_1_re_fu_401_p3 = ((tmp_13_reg_681[0:0] === 1'b1) ? releaseTime_new_1_fu_381_p3 : releaseDuration_read_reg_605);

assign resultAmplitude_5_fu_572_p3 = ((tmp_14_reg_699[0:0] === 1'b1) ? grp_fu_131_p2 : 32'd0);

assign resultAmplitude_6_fu_579_p3 = ((sel_tmp2_reg_782[0:0] === 1'b1) ? grp_fu_131_p2 : resultAmplitude_5_fu_572_p3);

assign resultAmplitude_7_fu_586_p3 = ((sel_tmp3_reg_793[0:0] === 1'b1) ? grp_fu_131_p2 : resultAmplitude_6_fu_579_p3);

assign resultAmplitude_fu_593_p3 = ((sel_tmp5_reg_799[0:0] === 1'b1) ? reg_174 : resultAmplitude_7_reg_814);

assign sel_tmp13_demorgan_fu_485_p2 = (sel_tmp6_demorgan_fu_469_p2 | tmp_22_fu_445_p2);

assign sel_tmp1_fu_514_p2 = (sel_tmp6_demorgan_fu_469_p2 ^ 1'd1);

assign sel_tmp2_fu_458_p2 = (tmp_17_reg_760 & not_tmp_1_fu_453_p2);

assign sel_tmp3_fu_520_p2 = (tmp_22_fu_445_p2 & sel_tmp1_fu_514_p2);

assign sel_tmp4_fu_526_p2 = (sel_tmp13_demorgan_fu_485_p2 ^ 1'd1);

assign sel_tmp5_fu_532_p2 = (tmp_23_reg_766 & sel_tmp4_fu_526_p2);

assign sel_tmp6_demorgan_fu_469_p2 = (tmp_14_reg_699 | tmp_17_reg_760);

assign sel_tmp8_fu_508_p2 = (tmp1_fu_502_p2 & sel_tmp_fu_463_p2);

assign sel_tmp_fu_463_p2 = (sel_tmp2_fu_458_p2 ^ not_tmp_1_fu_453_p2);

assign sustainAmplitude_ass_fu_332_p3 = ((tmp_31_fu_327_p2[0:0] === 1'b1) ? 32'd1065353216 : sustainAmplitude_rea_reg_614);

assign sustainTime_load_tmp_fu_362_p3 = ((or_cond_4_reg_733[0:0] === 1'b1) ? sustainTime : tmp_10_fu_351_p2);

assign sustainTime_new_1_fu_394_p3 = ((tmp_s_reg_643[0:0] === 1'b1) ? sustainTime : tmp_11_fu_369_p2);

assign sustainTime_new_1_tm_fu_413_p3 = ((tmp_13_reg_681[0:0] === 1'b1) ? sustainTime_new_1_fu_394_p3 : tmp_10_fu_351_p2);

assign time_load_s_fu_268_p3 = ((tmp_13_fu_259_p2[0:0] === 1'b1) ? time_r : 32'd0);

assign tmp1_fu_502_p2 = (not_sel_tmp7_fu_479_p2 & not_sel_tmp_fu_496_p2);

assign tmp_10_fu_351_p2 = (32'd1 + decayDuration_read_reg_622);

assign tmp_11_fu_369_p2 = (32'd1 + sustainTime_load_tmp_fu_362_p3);

assign tmp_12_fu_375_p2 = (32'd1 + releaseTime_load_rel_fu_356_p3);

assign tmp_13_fu_259_p2 = (tmp_32_fu_254_p2 | not_tmp_s_reg_656);

assign tmp_14_fu_276_p2 = (($signed(time_load_s_fu_268_p3) < $signed(attackDuration_read_reg_630)) ? 1'b1 : 1'b0);

assign tmp_17_fu_432_p2 = (($signed(time_load_s_reg_688) < $signed(decayDuration_read_reg_622)) ? 1'b1 : 1'b0);

assign tmp_18_fu_441_p2 = (time_load_s_reg_688 - attackDuration_read_reg_630);

assign tmp_22_fu_445_p2 = (($signed(time_load_s_reg_688) < $signed(sustainTime_new_1_tm_reg_754)) ? 1'b1 : 1'b0);

assign tmp_22_not_fu_473_p2 = (tmp_22_fu_445_p2 ^ 1'd1);

assign tmp_23_fu_436_p2 = (($signed(time_load_s_reg_688) < $signed(releaseTime_loc_1_re_fu_407_p3)) ? 1'b1 : 1'b0);

assign tmp_23_not_fu_491_p2 = (tmp_23_reg_766 ^ 1'd1);

assign tmp_24_fu_449_p2 = (time_load_s_reg_688 - sustainTime_new_1_tm_reg_754);

assign tmp_28_fu_321_p2 = (notrhs_fu_315_p2 | notlhs_fu_309_p2);

assign tmp_29_fu_541_p2 = (time_load_s_reg_688 + 32'd1);

assign tmp_31_fu_327_p2 = (tmp_28_fu_321_p2 & tmp_30_reg_717);

assign tmp_32_fu_254_p2 = (wait_r ^ 1'd1);

assign tmp_33_fu_212_p1 = press[0:0];

assign tmp_34_fu_216_p2 = (tmp_33_fu_212_p1 | wait_r);

assign tmp_35_fu_222_p4 = {{press[31:1]}};

assign tmp_36_fu_232_p3 = {{tmp_35_fu_222_p4}, {tmp_34_fu_216_p2}};

assign tmp_3_fu_246_p2 = (decayDuration_read_reg_622 - attackDuration_read_reg_630);

assign tmp_5_neg_fu_284_p2 = (tmp_5_to_int_fu_281_p1 ^ 32'd2147483648);

assign tmp_5_to_int_fu_281_p1 = sustainAmplitude_rea_reg_614;

assign tmp_6_fu_250_p2 = (releaseDuration_read_reg_605 - decayDuration_read_reg_622);

assign tmp_8_fu_295_p4 = {{tmp_5_to_int_fu_281_p1[30:23]}};

assign tmp_9_fu_184_p2 = ((lastpress != 32'd0) ? 1'b1 : 1'b0);

assign tmp_fu_305_p1 = tmp_5_to_int_fu_281_p1[22:0];

assign tmp_s_fu_190_p2 = ((press == 32'd0) ? 1'b1 : 1'b0);

assign wait_flag_1_fu_537_p2 = (sel_tmp8_reg_788 | not_tmp_s_reg_656);

assign wave_in_V_0_ack_in = wave_in_V_0_state[1'd1];

assign wave_in_V_0_load_A = (wave_in_V_0_state_cmp_full & ~wave_in_V_0_sel_wr);

assign wave_in_V_0_load_B = (wave_in_V_0_sel_wr & wave_in_V_0_state_cmp_full);

assign wave_in_V_0_sel = wave_in_V_0_sel_rd;

assign wave_in_V_0_state_cmp_full = ((wave_in_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign wave_in_V_0_vld_in = wave_in_V_TVALID;

assign wave_in_V_0_vld_out = wave_in_V_0_state[1'd0];

assign wave_in_V_TREADY = wave_in_V_0_state[1'd1];

assign wave_out_V_1_ack_in = wave_out_V_1_state[1'd1];

assign wave_out_V_1_ack_out = wave_out_V_TREADY;

assign wave_out_V_1_load_A = (wave_out_V_1_state_cmp_full & ~wave_out_V_1_sel_wr);

assign wave_out_V_1_load_B = (wave_out_V_1_sel_wr & wave_out_V_1_state_cmp_full);

assign wave_out_V_1_sel = wave_out_V_1_sel_rd;

assign wave_out_V_1_state_cmp_full = ((wave_out_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign wave_out_V_1_vld_out = wave_out_V_1_state[1'd0];

assign wave_out_V_TDATA = wave_out_V_1_data_out;

assign wave_out_V_TVALID = wave_out_V_1_state[1'd0];

endmodule //envelope
